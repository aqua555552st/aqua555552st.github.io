<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1.Linux与Unix的关系</title>
      <link href="/2024/02/16/1-Linux%E4%B8%8EUnix%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2024/02/16/1-Linux%E4%B8%8EUnix%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux与Unix的关系"><a href="#Linux与Unix的关系" class="headerlink" title="Linux与Unix的关系"></a>Linux与Unix的关系</h1><h2 id="1-unix怎么来的"><a href="#1-unix怎么来的" class="headerlink" title="1.unix怎么来的"></a>1.unix怎么来的</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/2EBDCB93E6A61DCBF80BBEFBCA80CE25.png" alt="img" style="zoom:50%;" /></p><hr><h2 id="2-Linux怎么来的"><a href="#2-Linux怎么来的" class="headerlink" title="2.Linux怎么来的"></a>2.Linux怎么来的</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/243CF83A5A2AF501CCC86A9D02EA9DAF.png" alt="img" style="zoom: 35%;" /></p><hr><h2 id="3-Linux与Unix关系图"><a href="#3-Linux与Unix关系图" class="headerlink" title="3.Linux与Unix关系图"></a>3.Linux与Unix关系图</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/3AED09E5CB05D5C8530EA45745448BA5.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.Linux介绍</title>
      <link href="/2024/02/16/0.Linux%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/02/16/0.Linux%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p><img src="D:\markdown(typora" alt="">使用教程.assets\2683F7BA416692134E45A0C96255C5A7.png)</p><hr><h2 id="2-Linux之父"><a href="#2-Linux之父" class="headerlink" title="2.Linux之父"></a>2.Linux之父</h2><p><img src="D:\markdown(typora" alt="">使用教程.assets\A2259D8123737C9775D672FECEEFDF2D.png)</p><hr><h2 id="3-主要发行版本"><a href="#3-主要发行版本" class="headerlink" title="3.主要发行版本"></a>3.主要发行版本</h2><p><img src="D:\markdown(typora" alt="">使用教程.assets\BB0902C19CE1F75DEE276585593DC80A.png)</p><blockquote><p><strong>Linux</strong>是一个<strong>内核</strong>，其他各种发行版都是在内核上的进一步<strong>封装</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型依赖注入</title>
      <link href="/2024/02/16/%E6%B3%9B%E5%9E%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/02/16/%E6%B3%9B%E5%9E%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型依赖注入"><a href="#泛型依赖注入" class="headerlink" title="泛型依赖注入"></a>泛型依赖注入</h1><p>[TOC]</p><h2 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240114195428691.png" alt=""></p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p><strong>要求：将多个Dao对象作为属性注入到多个Service对象中，怎么做？</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240114225329629.png" alt=""></p><p><strong><code>传统方法</code>：将多个Dao对象装配/注入到Service对象中 -&gt; 分别对Dao对象标识id并引用(==问题：麻烦==)</strong></p><p><strong><code>泛型依赖注入</code>：Service和Dao都有自己父类 -&gt; 父类之间装配(BaseDao装配到BaseService，形式上，因为不会实例化)，<u>在得到BaseService对象时传入泛型(Dao类)</u>，即可完成装配。</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240114231608796.png" alt="" style="zoom: 67%;" /></p><p>Book类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Phone类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.lhyedu.spring.depinjection;public class Phone &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>BaseDao类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token comment">//自定义泛型类，子类继承时就要传参数</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BookDao类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PhoneDao 的 save()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PhoneDao类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PhoneDao 的 save()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BaseService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> baseDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        baseDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BookService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">//通过泛型传入T=Book</span>    <span class="token comment">//父类BaseService有BaseDao属性</span>    <span class="token comment">//BaseDao&lt;T>可将泛型T注入子类</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PhoneService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>depinjection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">//通过泛型传入T=Phone</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//通过"泛型依赖"配置bean</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProByDependencyInjection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PhoneService</span> phoneService <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"phoneService"</span><span class="token punctuation">,</span> <span class="token class-name">PhoneService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phoneService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实际调用属性phoneDao的save方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PhoneDao</span> 的 <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring模拟-Spring基于注解配置的程序</title>
      <link href="/2024/02/16/Spring%E6%A8%A1%E6%8B%9F-Spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/02/16/Spring%E6%A8%A1%E6%8B%9F-Spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring模拟—Spring基于注解配置的程序"><a href="#Spring模拟—Spring基于注解配置的程序" class="headerlink" title="Spring模拟—Spring基于注解配置的程序"></a>Spring模拟—Spring基于注解配置的程序</h1><ol><li><strong>自己写一个简单的Spring容器，通过读取类的注解(@Component @Controller @Service @Reponsitory)，将对象注入到IOC容器中。</strong></li><li><strong>也就是说。不使用Spring原生框架，自己使用IO+Annotation+反射+集合 实现，打通Spring注解方式的计数痛点。</strong></li></ol><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240109092903430.png" alt="image-20240109092903430"></p><hr><p><strong>项目结构：</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110105107756.png" alt="" style="zoom: 67%;" /></p><p><strong>MyComponent类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Component:标识该类是个组件，是一个通用的注解 */</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"lhy1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ComponentScan注解</strong></p><blockquote><p>==<strong>自定义注解</strong>==</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token comment">//@Target(ElementType.TYPE)指定我们的ComponentScan注解可以修饰Type程序元素</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token comment">//@Retention(RetentionPolicy.RUNTIME)指定注解保留范围</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ComponentScan</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LhySpringConfig类</strong></p><blockquote><p><strong>作用：类似于Spring原生框架下的 <em>==Beans.xml文件==</em></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token comment">/** * 这是一个配置之类 * 作用：类似：原生Spring框架的 beans.xml文件 */</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.lhyedu.spring.component"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LhySpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LhySpringApplicationContext类</strong></p><blockquote><p><strong>作用：类似于Spring原生框架下的 <em>==ioc容器==</em></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * 类似于Spring原生框架的 IOC */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LhySpringApplicationContext</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span> configClass<span class="token punctuation">;</span>    <span class="token comment">//ioc存放的就是通过反射创建的对象</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">LhySpringApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Class</span> configClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configClass <span class="token operator">=</span> configClass<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this.configClass = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取要扫描的包</span>        <span class="token comment">//1.得到configClass的 @ComponentScan(value = "com.lhyedu.spring.component")注解</span>        <span class="token class-name">ComponentScan</span> componentScan <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configClass<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.通过ComponentScan的value得到要扫描的包</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.获取扫描路径下的所有类文件(.class文件)</span>        <span class="token comment">//(1)先要得到类的加载器</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">LhySpringApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//(2)通过类加载器 获取到要扫描包的url</span>        <span class="token comment">//将"com.lhyedu.spring.component"换为"com/lhyedu/spring/component"</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//file:/D:/lhy_spring/spring5/out/production/spring5/com/lhyedu/spring/component</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.将要加载的资源路径下的文件进行遍历(I/O)</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件可能是:普通文件/目录文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//若为目录文件</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取当前目录的所有文件(.class文件)</span>                <span class="token class-name">String</span> fileAbsolutePath <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// System.out.println("======================================");</span>                <span class="token comment">//System.out.println("文件的绝对路径=" + fileAbsolutePath);</span>                <span class="token comment">//(1)获取类名</span>                <span class="token comment">//file:/D:/.../com/lhyedu/spring/component/UserDao.class</span>                <span class="token comment">//切割成:UserDao</span>                <span class="token class-name">String</span> className <span class="token operator">=</span> fileAbsolutePath                        <span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                fileAbsolutePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//className = UserDao</span>                <span class="token comment">//(2)获取类的全路径(全类名)</span>                <span class="token class-name">String</span> classFullPath <span class="token operator">=</span>                        path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> className<span class="token punctuation">;</span>                <span class="token comment">//(3)判断该类是否需要注入到容器中(过滤没加注解的类)</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//这是就得到了该类(classFullPath)对应的class对象</span>                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//判断是否有注解</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">||</span>                        aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">||</span>                        aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">||</span>                        aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//将注解的value设为对象的名字</span>                        <span class="token comment">//仅以Component为例，其他同理...</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Component</span> component <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">String</span> id <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                className <span class="token operator">=</span> id<span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">//这是就可以反射对象，并放入容器中</span>                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Object</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//放入到容器中</span>                        ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test类(主方法)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里相当于：</span>        <span class="token comment">//ApplicationContext ioc =</span>        <span class="token comment">//    new ClassPathXmlApplicationContext("beans03.xml");</span>        <span class="token class-name">LhySpringApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">LhySpringApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">LhySpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"lhy1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>configClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>LhySpringConfig</span>com<span class="token operator">/</span>lhyedu<span class="token operator">/</span>spring<span class="token operator">/</span>component<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>component<span class="token punctuation">.</span></span>MyComponent</span><span class="token annotation punctuation">@30f39991</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110105601810.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置Bean</title>
      <link href="/2024/02/16/Spring%E9%85%8D%E7%BD%AEBean/"/>
      <url>/2024/02/16/Spring%E9%85%8D%E7%BD%AEBean/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring配置Bean"><a href="#Spring配置Bean" class="headerlink" title="Spring配置Bean"></a>Spring配置Bean</h1><p>[TOC]</p><p><strong>以Monster类为例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monster</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> monsterId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> skill<span class="token punctuation">;</span>    <span class="token comment">//无参构造器一定要写，反射时需要使用无参构造器！！！</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> monsterId<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> skill<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterId <span class="token operator">=</span> monsterId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//set方法一定要写，反射时用这个方法初始化类的属性！！！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonsterId</span><span class="token punctuation">(</span><span class="token keyword">int</span> monsterId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterId <span class="token operator">=</span> monsterId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSkill</span><span class="token punctuation">(</span><span class="token class-name">String</span> skill<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Monster&#123;"</span> <span class="token operator">+</span>                <span class="token string">"monsterId='"</span> <span class="token operator">+</span> monsterId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", skill='"</span> <span class="token operator">+</span> skill <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于xml文件配置"><a href="#基于xml文件配置" class="headerlink" title="基于xml文件配置"></a>基于xml文件配置</h2><h3 id="1-创建Bean对象"><a href="#1-创建Bean对象" class="headerlink" title="1.创建Bean对象"></a>1.创建Bean对象</h3><h4 id="①通过类型获取bean"><a href="#①通过类型获取bean" class="headerlink" title="①通过类型获取bean"></a>①通过类型获取bean</h4><p><strong>要求ioc容器中的同一个类的bean只能有一个，否则会抛出NoUniqueBeanDefinitionException！</strong></p><blockquote><p><strong>应用场景：比如XxxAction/Servlet/Controller在一个线程中只需要一个对象实例(单例)</strong></p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>白骨精<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>吃人<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanByConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'2'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'蜘蛛精'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'吐丝'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②通过构造器配置bean"><a href="#②通过构造器配置bean" class="headerlink" title="②通过构造器配置bean"></a>②通过构造器配置bean</h4><p>方法1</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--在Spring的IOC容器中，通过 构造器 配置bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--index标识 构造器的参数下标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>蜘蛛精<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>吐丝<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--index标识 构造器的参数下标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>白骨精<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>白骨鞭<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanByConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> monster03 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"monster03"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>monster03<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> monster04 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"monster04"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>monster04<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'2'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'蜘蛛精'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'吐丝'</span><span class="token punctuation">&#125;</span><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'3'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'白骨精'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'白骨鞭'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-注入其他bean对象-常用"><a href="#2-注入其他bean对象-常用" class="headerlink" title="2.注入其他bean对象(常用)"></a>2.注入其他bean对象(常用)</h3><p><strong>ioc容器中的某个bean对象的业务逻辑需要引用到ioc容器的另一个bean对象</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240111153013789.png" alt="" style="zoom:50%;" /></p><p>MemberDAOImpl类(Dao层)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token comment">//Dao类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberDAOImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">MemberDAOImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MemberDAOImpl 构造器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MemberDAOImpl add方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MemberServiceImpl类(Service层)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">MemberDAOImpl</span></span><span class="token punctuation">;</span><span class="token comment">//Service层</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MemberDAOImpl</span> memberDAO<span class="token punctuation">;</span><span class="token comment">//属性:引用DAO层对象</span>    <span class="token comment">//getter&amp;setter</span>    <span class="token keyword">public</span> <span class="token class-name">MemberDAOImpl</span> <span class="token function">getMemberDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> memberDAO<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemberDAO</span><span class="token punctuation">(</span><span class="token class-name">MemberDAOImpl</span> memberDAO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memberDAO <span class="token operator">=</span> memberDAO<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//调用Dao层的属性的方法！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MemberServiceImpl add方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memberDAO<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token constant">DAO</span>层<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"memberDAO"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.lhyedu.spring.dao.MemberDAOImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token class-name">Service</span>层<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"ms"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.lhyedu.spring.Service.MemberServiceImpl"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>property标签内的ref标签，填引用的 对象id<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"memberDAO"</span> ref<span class="token operator">=</span><span class="token string">"memberDAO"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanByRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MemberServiceImpl</span> ms <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"ms"</span><span class="token punctuation">,</span> <span class="token class-name">MemberServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ms<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MemberDAOImpl</span> 构造器<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">MemberServiceImpl</span> add方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">MemberDAOImpl</span> add方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-注入内部bean对象"><a href="#3-注入内部bean对象" class="headerlink" title="3.注入内部bean对象"></a>3.注入内部bean对象</h3><p><strong>直接将某个bean 作为属性(内部bean对象)注入另一个bean中。</strong></p><p>以前面的MemberDAOImpl类(Dao层)和MemberServiceImpl类(Service层)为例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ms2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.Service.MemberServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注入一个内部bean--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.dao.MemberDAOImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><u>以Master类为例</u></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterList<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterSet<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> monsterName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> pros<span class="token punctuation">;</span><span class="token comment">//HashTable的子类，是key-value的形式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonsterList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterList <span class="token operator">=</span> monsterList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonsterMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterMap <span class="token operator">=</span> monsterMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonsterSet</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterSet <span class="token operator">=</span> monsterSet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonsterName</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> monsterName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterName <span class="token operator">=</span> monsterName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPros</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> pros<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pros <span class="token operator">=</span> pros<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="①注入List属性"><a href="#①注入List属性" class="headerlink" title="①注入List属性"></a>①注入List属性</h4><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Master对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Master<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>太上老君<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--给List属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>老鼠精<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②注入Map属性"><a href="#②注入Map属性" class="headerlink" title="②注入Map属性"></a>②注入Map属性</h4><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Master对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Master<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>太上老君<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--给Map属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--key--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>monsterket01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--value--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③注入Set属性"><a href="#③注入Set属性" class="headerlink" title="③注入Set属性"></a>③注入Set属性</h4><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Master对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Master<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>太上老君<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--给Set属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterSet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛魔王<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>999<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unknown<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④注入Array-数组-属性"><a href="#④注入Array-数组-属性" class="headerlink" title="④注入Array(数组)属性"></a>④注入Array(数组)属性</h4><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Master对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Master<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>太上老君<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--给Array(数组)属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>金角大王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>银角大王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑤注入Properties属性"><a href="#⑤注入Properties属性" class="headerlink" title="⑤注入Properties属性"></a>⑤注入Properties属性</h4><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Master对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Master<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>太上老君<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--给Properties属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pros<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大数据工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-级联属性赋值"><a href="#4-级联属性赋值" class="headerlink" title="4.级联属性赋值"></a>4.级联属性赋值</h3><p><strong>spring的ioc容器，可以==直接给bean对象的属性的属性赋值==，即：级联属性赋值</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240111210408994.png" alt="" style="zoom:50%;" /></p><p>Dept类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token comment">//部门类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Dept&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Emp类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token comment">//员工类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dept</span> <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Emp&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", dept="</span> <span class="token operator">+</span> dept <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Dept对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Dept<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置Emp对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给Emp类的 属性的属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lhy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--这里希望给dept的name属性赋值[级联属性赋值] -> 格式：--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java开发部门<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class SpringBeanTest &#123;    @Test    public void setProByRelation() &#123;        ApplicationContext ioc &#x3D;                new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        Emp emp &#x3D; ioc.getBean(&quot;emp&quot;, Emp.class);        System.out.println(emp);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Emp</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token char">'lhy'</span><span class="token punctuation">,</span> dept<span class="token operator">=</span><span class="token class-name">Dept</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span>'<span class="token class-name">Java</span>开发部门'<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-工厂模式获取bean对象"><a href="#5-工厂模式获取bean对象" class="headerlink" title="5.工厂模式获取bean对象"></a>5.工厂模式获取bean对象</h3><h4 id="①静态工厂获取bean对象"><a href="#①静态工厂获取bean对象" class="headerlink" title="①静态工厂获取bean对象"></a>①静态工厂获取bean对象</h4><p><strong>在spring的ioc容器，可以通过<u>静态工厂</u>获取bean对象。</strong></p><p>静态工厂类：MyStaticFactory</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Monster</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">//静态工厂类，可以返回Monster对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStaticFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterMap<span class="token punctuation">;</span>    <span class="token comment">//使用 静态代码块 进行初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        monsterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monsterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_01"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"黄袍怪"</span><span class="token punctuation">,</span> <span class="token string">"一阳指"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monsterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_02"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"九头金雕"</span><span class="token punctuation">,</span> <span class="token string">"如来神掌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//[重点！]提供一个方法返回Monster对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Monster</span> <span class="token function">getMonster</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> monsterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置monster对象，通过静态工厂获取--></span><span class="token comment">&lt;!--重点！！！    1.class标签：填写 静态工厂类的全类名    2.factory-method标签：填写获取对象的方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.factory.MyStaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getMonster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--constructor-arg:factory-method方法的参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster_01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByStaticFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> m1 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'100'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'黄袍怪'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'一阳指'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②实例工厂获取bean对象"><a href="#②实例工厂获取bean对象" class="headerlink" title="②实例工厂获取bean对象"></a>②实例工厂获取bean对象</h4><p><strong>在spring的ioc容器，可以通过<u>实例工厂</u>获取bean对象。</strong></p><p>静态工厂类：MyInstanceFactory</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Monster</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">//实例工厂类，可以返回Monster对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInstanceFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterMap<span class="token punctuation">;</span>    <span class="token comment">//使用 静态代码块 进行初始化</span>    <span class="token punctuation">&#123;</span>        monsterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monsterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_01"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"黄袍怪"</span><span class="token punctuation">,</span> <span class="token string">"一阳指"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monsterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_02"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"九头金雕"</span><span class="token punctuation">,</span> <span class="token string">"如来神掌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span> <span class="token function">getMonster</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> monsterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置monster对象，通过实例工厂获取--></span><span class="token comment">&lt;!--1.先配置实例工厂类的bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mif<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.factory.MyInstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--2.再配置要实例工厂返回的类对象        factory-bean：需要使用的实例工厂的bean        factory-method标签：填写获取对象的方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m2<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mif<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getMonster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--constructor-arg:factory-method方法的参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster_01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByInstanceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> m2 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"m2"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'200'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'九头金雕'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'如来神掌'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="③通过FactoryBean获取对象-重点"><a href="#③通过FactoryBean获取对象-重点" class="headerlink" title="③通过FactoryBean获取对象(重点)"></a>③通过FactoryBean获取对象(重点)</h4><p><strong>在Spring的ioc容器，通过FactoryBean获取bean对象(重点)。</strong></p><p><strong>通过创建 ：类 implements FactoryBean<Monster>。维护一个<code>Map</code>和<code>key</code>属性==，==并实现以下三个方法：</strong></p><ol><li><code>getObject()</code>：返回 Map属性中与keyVal对应的 对象</li><li><code>getObjectType()</code>：返回 Map属性中value的.class对象</li><li><code>isSingleton()</code>：是否以单例形式保存bean对象</li></ol><p>MyFactoryBean类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Monster</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">FactoryBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monster_map<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        monster_map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monster_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster03"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"黄袍怪"</span><span class="token punctuation">,</span> <span class="token string">"一阳指"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monster_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster04"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"九头金雕"</span><span class="token punctuation">,</span> <span class="token string">"如来神掌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回 Map属性中与keyVal对应的 对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> monster_map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回 Map属性中value的.class对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//是否以单例形式保存bean对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Monster对象，通过FactoryBean获取--></span><span class="token comment">&lt;!--class：指定使用的FactoryBean    name="key"：标识属性key; value="monster04":key的值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster_04<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.factory.MyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster04<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> my_monster_05 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"my_monster_05"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>my_monster_05<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'100'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'黄袍怪'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'一阳指'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Bean相关"><a href="#Bean相关" class="headerlink" title="Bean相关"></a>Bean相关</h2><h3 id="1-bean配置信息重用-继承"><a href="#1-bean配置信息重用-继承" class="headerlink" title="1.bean配置信息重用(继承)"></a>1.bean配置信息重用(继承)</h3><p><strong>在spring的ioc容器中，提供了一种继承的方式来实现bean配置信息的重用。==&gt;parent标签</strong></p><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token comment">&lt;!--配置Monster对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster04<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>蜈蚣精<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>哲人<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--再配置一个Monster对象        但这个对象的属性值 和monster04一样！！        parent标签:表示与parent="~"对象的属性一致--></span><span class="token comment">&lt;!--注意：当再bean标签中加入 abstract="true"后，这个bean只能被继承，不能实例化！--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster05<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByExtend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"monster04"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"monster05"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'10'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'蜈蚣精'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'哲人'</span><span class="token punctuation">&#125;</span><span class="token class-name">Monster</span><span class="token punctuation">&#123;</span>monsterId<span class="token operator">=</span><span class="token char">'10'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'蜈蚣精'</span><span class="token punctuation">,</span> skill<span class="token operator">=</span><span class="token char">'哲人'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-bean创建顺序"><a href="#2-bean创建顺序" class="headerlink" title="2.bean创建顺序"></a>2.bean创建顺序</h3><h4 id="①beans-xml解析顺序"><a href="#①beans-xml解析顺序" class="headerlink" title="①beans.xml解析顺序"></a>①beans.xml解析顺序</h4><p>Test1类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test2类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u><strong>在Spring的ioc容器中，默认是按照配置的顺序创建bean对象。</strong></u></p><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--ioc容器中，默认是按照配置的顺序创建bean对象(创建t1->创建t2)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Test1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Test1</span>构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Test2</span>构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u><strong>根据<code>depends-on</code>标签，可指定bean初始化的顺序(依赖关系)。</strong></u></p><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--depends-on="t2"标签:先创建t2->再创建t1--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Test1<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Test2</span>构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Test1</span>构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="②bean对象の创建顺序"><a href="#②bean对象の创建顺序" class="headerlink" title="②bean对象の创建顺序"></a>②bean对象の创建顺序</h4><p><strong>分析两个bean创建的顺序是什么？</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置MemberDao对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.dao.MemberDAOImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.Service.MemberServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>先创建 id=memberDAO</strong></li><li><strong>再创建 id=memberService</strong></li><li><strong>再调用memberService.setMemberDAO()完成引用</strong></li></ol><p><strong>分析两个bean创建的顺序是什么？</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.Service.MemberServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置MemberDao对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.dao.MemberDAOImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>先创建 id=memberService</strong></li><li><strong>再创建 id=memberDAO</strong></li><li><strong>再调用memberService.setMemberDAO()完成引用</strong></li></ol><blockquote><p><strong>总结：先按xml顺序创建bean对象；再通过反射，根据属性引用调用setter方法(防止空引用)</strong></p></blockquote><h3 id="3-bean的单例-amp-多例"><a href="#3-bean的单例-amp-多例" class="headerlink" title="3.bean的单例&amp;多例"></a>3.bean的单例&amp;多例</h3><p>以以下测试文件为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器被调用.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Cat&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanBySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"cat0"</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>单例模式</code>：在spring的ioc容器，在默认是按照单例创建(<code>scope=&quot;singleton&quot;</code>)的，即配置一个bean对象后，ioc容器只会创建一个bean实例。</strong></p><p>beans.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>默认情况下，scope<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token punctuation">(</span>单例<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"cat0"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.lhyedu.spring.bean.Cat"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"id"</span> value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"小花猫"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//只创造了一个Cat对象</span><span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'小花猫'</span><span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'小花猫'</span><span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'小花猫'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>多例模式</code>：如果希望ioc容器配置某个bean对象，是以多个实例形式创建的则可以通过配置<code>scope=&quot;prototype&quot;</code></strong></p><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--scope="prototype"(原型)，每次getBean都创建一个新对象--></span><span class="token comment">&lt;!--懒加载默认为false ==> lazy-init="false"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Cat<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小花猫<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>补充：<code>lazy-init(懒加载)</code>：ioc容器初始化时不创建，getBean方法调用时才创建</strong></p></blockquote><p> 运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//创建多个Cat对象</span><span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'小花猫'</span><span class="token punctuation">&#125;</span><span class="token comment">//且可以看出：Cat对象创建是在getBean方法调用时，而非ioc初始化时</span>构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'小花猫'</span><span class="token punctuation">&#125;</span>构造器被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'小花猫'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-bean的生命周期-重点"><a href="#4-bean的生命周期-重点" class="headerlink" title="4.bean的生命周期(重点)"></a>4.bean的生命周期(重点)</h3><p><strong>bean对象的创建是由JVM完成的，然后执行如下方法：</strong></p><ol><li><strong>执行构造器</strong></li><li><strong>执行setter方法</strong></li><li><strong>调用bean的初始化方法(需要配置<code>init-method</code>标签)</strong></li><li><strong>使用bean</strong></li><li><strong>当容器关闭时，调用bean的销毁方法(需要配置<code>destroy-method</code>标签)</strong></li></ol><p>House类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setXx()方法被调用.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House init().."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House destroy().."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--init-method="init":指定init函数为bean初始化方法    destroy-method="destroy":指定destroy函数为bean销毁方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>house<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.House<span class="token punctuation">"</span></span>       <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京豪宅<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BeanLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">House</span> house <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token class-name">House</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用bean = "</span> <span class="token operator">+</span> house<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ioc编译类型：ApplicationContext(无close方法)</span>        <span class="token comment">//ioc运行类型：ClassPathXmlApplicationContext(有close方法)</span>        <span class="token comment">//ioc编译类型->向下转型，再调用close方法</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">)</span> ioc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 构造器<span class="token function">setXx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法被调用<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">House</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>使用bean <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>House</span><span class="token annotation punctuation">@7e6f74c</span><span class="token class-name">House</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="后置处理器-涉及AOP先不细讲"><a href="#后置处理器-涉及AOP先不细讲" class="headerlink" title="后置处理器(涉及AOP先不细讲)"></a>后置处理器(涉及AOP先不细讲)</h2><ul><li><strong>在spring的ioc容器中，可以配置bean的后置处理器（本质：一个bean对象，作用比较特殊）</strong></li><li><strong>该处理器(/对象)会在bean初始化方法(<code>init-method</code>)调用前和初始化方法调用后被调用</strong></li><li><strong>程序员可以在后置处理器中编写自己的代码</strong></li></ul><p>House类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setXx()方法被调用.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House init().."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House destroy().."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>后置处理器(implements BeanPostProcessor并要重写两个方法)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">;</span><span class="token comment">//后置处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 什么时候被调用：在bean的init-method方法前会被调用     * @param bean：传入的在ioc容器中 配置的bean对象     * @param beanName：传入的在ioc容器中创建/配置bean的id     * @return 程序员对传入的bean进行修改/处理，再返回     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessBeforeInitialization被调用。bean="</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 什么时候被调用：在bean的init-method方法后会被调用     * 其他同上     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessAfterInitialization被调用。bean="</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>beans.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--重点：配置后续处理器类bean->该bean初始化后作用于其他bean的初始化(切面编程AOP)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.MyBeanPostProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mbpp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--包含后置处理器处理的bean的生命周期--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>house<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.House<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京豪宅<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BeanPostProcessorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">House</span> house <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token class-name">House</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">)</span> ioc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 构造器<span class="token function">setXx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法被调用<span class="token punctuation">.</span><span class="token punctuation">.</span>postProcessBeforeInitialization被调用。bean<span class="token operator">=</span>house<span class="token comment">//init-method前被调用</span><span class="token class-name">House</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>postProcessAfterInitialization被调用。bean<span class="token operator">=</span>house<span class="token comment">//init-method后被调用</span><span class="token class-name">House</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240113153614549.png" alt=""></p></blockquote><hr><h2 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/137F684734D3DBF1ECE25CD7A9B3B803.png" alt=""></p><h3 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h3><p><strong>使用注解的方式来配置<code>Controller</code>/<code>Service</code>/<code>Respository</code>/<code>Component</code>。</strong></p><ul><li>引入<code>spring-aop-5.3.8.jar</code>，在<code>spring/libs</code>下拷贝即可</li><li>创建<code>UserController.java</code>，<code>UserService.java</code>，<code>UserDao.java</code>，<code>MyComponent.java</code></li></ul><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240113192508746.png" alt="" style="zoom: 50%;" /></p><p>UserDao类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token comment">//@Repository:标记为一个持久化的类，通常用于Dao类</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">//@Service：表示是一个处理业务逻辑的类，通常用于Service类</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserController类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token comment">//@Controller：标识是一个控制器，通常用于Servlet</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyComponent类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import org.springframework.stereotype.Component;&#x2F;&#x2F;@Component：标识是一个组件(通用注解，扫描到该标识自动创建)@Componentpublic class MyComponent &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>beans.xml（指定注解扫描范围）</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--不能忘！！配置自动扫描的包，注意需要加入context名称空间--></span><span class="token comment">&lt;!--base-package：ioc初始化时，递归扫描指定的包，创建标有注解的bean对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.component<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanByAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>debug发现，四个注解标识的类在ioc容器初始化时即创建成功！</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240113200814466.png" alt="" style="zoom:67%;" /></p><h3 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h3><ul><li><p><strong>需要导入spring-aop-5.3.8.jar</strong></p></li><li><p><strong>必须在spring配置文件中指定”指定扫描的包及子包”(<code>base-package=&quot;~.*&quot;</code>)，IOC容器才能检测到当前项目中哪些类被标识了注解</strong></p></li><li><p><strong>Spring的IOC容器不能检测一个使用了@Controller注解的类到底是不是一个真正的控制器。注解的名称是用于程序员自己识别当前标识的是什么组件。其它的@Service@Repository也是一样的道理【也就是说spring的IOC容器只要检查到注解就会生成对象，但是这个注解的含义spring不会识别，注解是给程序员编程方便看的】</strong></p></li><li><p>```xml</p><pre><code>&lt;context:component-scan base-package=&quot;com.lhyedu.spring.component&quot;                         resource-pattern=&quot;User*.class&quot;/&gt;</code></pre><pre class="line-numbers language-none"><code class="language-none">  **&#96;resource-pattern&#x3D;&quot;User*.class&quot;&#96;：表示只扫描满足需要的类**- **排除哪些类：&#96;exclude-filter&#96;**  **包括哪些类：&#96;include-filter&#96;**  &#96;&#96;&#96;xml  &lt;context:component-scan base-package&#x3D;&quot;com.lhyedu.spring.component&quot;&gt;  &lt;!--exclude-filter标签：过滤的注解，ioc初始化时不会创建；include-filter作用相反--&gt;      &lt;!--expression&#x3D;&quot;~&quot;：要排除注解的全类名--&gt;      &lt;context:exclude-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Service&quot;&#x2F;&gt;  &lt;&#x2F;context:component-scan&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="bean的自动装配-高频面试题"><a href="#bean的自动装配-高频面试题" class="headerlink" title="bean的自动装配(高频面试题)"></a>bean的自动装配(高频面试题)</h2><p><strong>在spring的ioc容器，可以实现自动装配bean</strong></p><h3 id="1-基于xml"><a href="#1-基于xml" class="headerlink" title="1.基于xml"></a>1.基于xml</h3><ul><li><p><strong><code>autowire=&quot;byType&quot;</code>：在创建bean对象时，通过 <u>类型</u> 给属性自动完成引用</strong></p><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>比如OrderService对象有 private OrderDao orderDao<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>就会在容器中找 OrderDao类型 的对象。有<span class="token operator">-></span>自动装配；多个同类型<span class="token operator">-></span>报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p><strong><code>autowire=&quot;byName&quot;</code>：在创建bean对象时，通过 <u>bean的id</u> 给属性自动完成引用</strong></p><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>比如OrderService对象有 private OrderDao orderDao<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>再看属性的<span class="token function">setXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法的<span class="token function">xxx</span><span class="token punctuation">(</span>重点<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span>如果没有<span class="token operator">-></span>则装配失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/2BBE76BF9000858CEE336954BE414048.png" alt="img"></p><p>OrderDao类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token comment">//Dao层</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存 一个订单..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OrderService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">OrderDao</span></span><span class="token punctuation">;</span><span class="token comment">//Service层</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//引用到Dao类为属性</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderDao</span> <span class="token function">getOrderDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderDao</span><span class="token punctuation">(</span><span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderDao <span class="token operator">=</span> orderDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OrderAction类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token class-name">OrderService</span></span><span class="token punctuation">;</span><span class="token comment">//Controller层</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderAction</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//引用到Service类为属性</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderService</span> <span class="token function">getOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderService</span><span class="token punctuation">(</span><span class="token class-name">OrderService</span> orderService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>beans.xml（自动装配bean属性：<code>autowire</code>标签）</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置OrderDao对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.dao.OrderDao<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置OrderService对象，但不对属性进行&lt;property>引用赋值->自动装配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.Service.OrderService<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderService<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置OrderAction对象，但不对属性进行&lt;property>引用赋值->自动装配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.web.OrderAction<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderAction<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanByAutowried</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrderAction</span> oa <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orderAction"</span><span class="token punctuation">,</span> <span class="token class-name">OrderAction</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrderService</span> os <span class="token operator">=</span> oa<span class="token punctuation">.</span><span class="token function">getOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证OrderAction是否成功装配OrderService</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">getOrderDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证OrderService是否成功装配OrderDao</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span>Service<span class="token punctuation">.</span>OrderService</span><span class="token annotation punctuation">@34123d65</span><span class="token comment">//Action的Service属性装配成功</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>OrderDao</span><span class="token annotation punctuation">@59474f18</span><span class="token comment">//Service的Dao属性装配成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-基于注解"><a href="#2-基于注解" class="headerlink" title="2.基于注解"></a>2.基于注解</h3><p><strong>基于注解配置bean，也可实现自动装配，使用的注解是：@Autowired或@Resource</strong></p><blockquote><p><strong>重点：除了泛型依赖注入的情况用：@Autowired；其他大多数情况下都用：@Resource</strong></p></blockquote><h4 id="①-Autowired"><a href="#①-Autowired" class="headerlink" title="①@Autowired"></a>①@Autowired</h4><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/9AD44BEEA0E3B23AE32A1BA9CEFE7FDF.png" alt=""></p><p>UserService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">//@Service：表示是一个处理业务逻辑的类，通常用于Service类</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService hi()~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserController类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token comment">//@Controller：标识是一个控制器，通常用于Servlet</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//自动装配</span>    <span class="token comment">//1)在IOC容器中查找带装配组件的类型，如果有唯一bean匹配(按类型)->装配</span>    <span class="token comment">//2)若带装配类型在ioc容器有多个，则根据带装配属性属性名作为id查找</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController 的sayOk()~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Service层属性的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.component<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.component.UserService<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProByAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserController</span> userController <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userController"</span><span class="token punctuation">,</span> <span class="token class-name">UserController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userController<span class="token punctuation">.</span><span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserController</span> 的<span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token class-name">UserService</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token comment">//UserController的UserService属性的hi()调用成功->装配成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="②-Resource"><a href="#②-Resource" class="headerlink" title="②@Resource"></a>②@Resource</h4><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/46AFBEF7DAC9335D09DB228F1F564B76.png" alt=""></p><p>UserService类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">//@Service：表示是一个处理业务逻辑的类，通常用于Service类</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService hi()~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserController类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token comment">//@Controller：标识是一个控制器，通常用于Servlet</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@Resource两个作用属性：name和type(类似xml配置下的autowired标签)</span>    <span class="token comment">//1)没指定 -> 默认byName注入，没找到在使用byType注入</span>    <span class="token comment">//2)@Resource(type=UserService.class)->要求容器中只能有1个该类型对象</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service200"</span><span class="token punctuation">)</span><span class="token comment">//bean中引用的id</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userServiceWuYiYi<span class="token punctuation">;</span><span class="token comment">//此时这里的变量名无意义！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController 的sayOk()~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceWuYiYi<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Service层属性的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.lhyedu.spring.component"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.lhyedu.spring.component.UserService"</span> id<span class="token operator">=</span><span class="token string">"service200"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProByResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserController</span> userController <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userController"</span><span class="token punctuation">,</span> <span class="token class-name">UserController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userController<span class="token punctuation">.</span><span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserController</span> 的<span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token class-name">UserService</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token comment">//装配成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring容器结构剖析</title>
      <link href="/2024/02/16/Spring%E5%AE%B9%E5%99%A8%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/"/>
      <url>/2024/02/16/Spring%E5%AE%B9%E5%99%A8%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring容器结构剖析"><a href="#Spring容器结构剖析" class="headerlink" title="Spring容器结构剖析"></a>Spring容器结构剖析</h1><p>[TOC]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Monster</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Monster</span> monster01 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"monster01"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>monster01<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110223306082.png" alt=""></p><hr><h2 id="beanDefinitionMap"><a href="#beanDefinitionMap" class="headerlink" title="beanDefinitionMap"></a>beanDefinitionMap</h2><blockquote><p>该类的所有属性</p></blockquote><p><code>ioc</code> -&gt; <code>beanfactory</code></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110223503783.png" alt=""></p><p><code>beanfactory</code> -&gt; <code>beanDefinitionMap</code></p><blockquote><p><strong>注意：beanDefinitionMap的数据类型是：ConcurrentHashMap</strong></p></blockquote><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110223757080.png" alt=""></p><hr><h2 id="beanDefinitionMap的-属性"><a href="#beanDefinitionMap的-属性" class="headerlink" title="beanDefinitionMap的 属性"></a>beanDefinitionMap的 属性</h2><h3 id="①table-数组"><a href="#①table-数组" class="headerlink" title="①table[]数组"></a>①table[]数组</h3><p><strong>保存配置的<u>bean信息</u>。</strong></p><blockquote><p><strong>table[]数组的数据类型是：ConcurrentHashMap的内部类：ConcurrentHashMap$Node</strong></p></blockquote><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110230125665.png" alt=""></p><h3 id="②propertyValues"><a href="#②propertyValues" class="headerlink" title="②propertyValues"></a>②propertyValues</h3><p><strong>保存配置<u>bean的”属性”信息</u>。</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110230908336.png" alt=""></p><hr><h2 id="singletonObjects"><a href="#singletonObjects" class="headerlink" title="singletonObjects"></a>singletonObjects</h2><blockquote><p><strong>注意：singletonObjects的数据类型也是：ConcurrentHashMap</strong></p></blockquote><p><strong>也维护一个table[]属性，保存<u>创建出来的对象</u>。</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110231757802.png" alt=""></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110232915695.png" alt=""></p><hr><h2 id="xml不指定id"><a href="#xml不指定id" class="headerlink" title="xml不指定id"></a>xml不指定id</h2><p><strong>在beans.xml文件中，注入两个Monster对象，但均不指定id：</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛魔王<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛魔王拳<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>白骨精<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>吃人<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行会不会报错？</strong></p><p><u><strong>答：不会。系统会默认分配id，分配规则是<code>全类名#1</code>，<code>全类名#2</code>，<code>全类名#n</code>。</strong></u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建IOC容器对象</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//BeanDefinitionNames[]:保存对象的变量名，便于查找</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanDefinitionNames <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> beanDefinitionNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>Monster</span>#<span class="token number">0</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span>Monster</span>#<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引言</title>
      <link href="/2024/02/16/%E5%BC%95%E8%A8%80/"/>
      <url>/2024/02/16/%E5%BC%95%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>[TOC]</p><h2 id="Spring核心学习内容"><a href="#Spring核心学习内容" class="headerlink" title="Spring核心学习内容"></a>Spring核心学习内容</h2><ol><li><strong><code>IOC(Inversion Of Controller控制反转)</code>：管理 Java对象</strong></li><li><strong><code>AOP(切面编程)</code></strong></li><li><strong><code>JdbcTemplate</code>：是Spring提供的一套访问数据库的技术(应用性强)</strong></li><li><strong><code>声明式事务</code>：基于IOC/AOP实现事务管理(理解较困难)</strong></li></ol><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110191915708.png" alt="" style="zoom:67%;" /></p><hr><h2 id="Spring几个重要概念"><a href="#Spring几个重要概念" class="headerlink" title="Spring几个重要概念"></a>Spring几个重要概念</h2><h3 id="Spring可以整合其他框架"><a href="#Spring可以整合其他框架" class="headerlink" title="Spring可以整合其他框架"></a>Spring可以整合其他框架</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110194939562.png" alt="" style="zoom: 33%;" /></p><h3 id="Spring的2个核心概念-IOC-amp-AOP"><a href="#Spring的2个核心概念-IOC-amp-AOP" class="headerlink" title="Spring的2个核心概念:IOC&amp;AOP"></a>Spring的2个核心概念:IOC&amp;AOP</h3><p><u><strong>传统开发模式：JdbcUtils/反射</strong></u></p><ul><li>程序员编写程序，在程序中读取配置信息</li><li>创建对象，new ObjectXxx() / 反射创建对象</li><li>使用对象完成任务</li></ul><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110195157780.png" alt=""></p><p><u><strong>IOC开发模式：[EmpAction EmpService EmpDao Emp]</strong></u></p><ul><li>Spring根据配置文件(xml/注解)，创建对象，并放到容器(ConcurrentHaspMap)中，并完成对象间的依赖</li><li>当需要创建某个对象实例时，就直接从容器中获取即可</li><li>程序员更关注相应业务(而非new 对象)</li></ul><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110195900586.png" alt="" style="zoom: 50%;" /></p><h3 id="Spring核心价值"><a href="#Spring核心价值" class="headerlink" title="Spring核心价值"></a>Spring核心价值</h3><font color="red" size=3>通过配置，给程序提供需要使用的web层[Servlet(Action/Controller)] / Service / Dao / [JavaBean/entity] 对象</font><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110201426657.png" alt="" style="zoom: 67%;" /></p><hr><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/56978B79DCB6704E251BBEB235CC4F29.png" alt=""></p><p><strong>在项目下创建<code>lib</code>目录，在包中将以下5个<code>.jar</code>包复制并加入目录(add as library)</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110202626370.png" alt="" style="zoom: 67%;" /></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110202900432.png" alt="" style="zoom: 67%;" /></p><p><strong>左键<code>src</code>-&gt; <code>New</code> -&gt; <code>XML Configuration File</code> -&gt; <code>Spring Config</code> -&gt; <code>beans.xml</code></strong></p><p><strong>beans.xml文件</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Monster对象        1.class:类的全路径        2.id:该类创建的对象的 变量名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lhyedu.spring.bean.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        &lt;property>&lt;/property>:配置类的 属性标签        1)name:属性名        2)value:赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛魔王<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛魔王拳<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Monster类</strong></p><blockquote><p><strong>注意：反射创建对象时会用到==无参构造器==与==set方法==，定义类时必须写上！！！</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token comment">/** * javaBean/Entity */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monster</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> monsterId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> skill<span class="token punctuation">;</span>    <span class="token comment">//无参构造器一定要写，反射时需要使用无参构造器！！！</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token class-name">String</span> monsterId<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> skill<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterId <span class="token operator">=</span> monsterId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//set方法一定要写，反射时用这个方法初始化类的属性！！！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonsterId</span><span class="token punctuation">(</span><span class="token class-name">String</span> monsterId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monsterId <span class="token operator">=</span> monsterId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSkill</span><span class="token punctuation">(</span><span class="token class-name">String</span> skill<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Monster&#123;"</span> <span class="token operator">+</span>                <span class="token string">"monsterId='"</span> <span class="token operator">+</span> monsterId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", skill='"</span> <span class="token operator">+</span> skill <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lhyedu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Monster</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建IOC容器对象</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.提供getBean获取对应对象，参数是&lt;bean>的id</span>        <span class="token class-name">Monster</span> monster01 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"monster01"</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>monster01<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110205214273.png" alt=""></p><hr><h2 id="类加载路径"><a href="#类加载路径" class="headerlink" title="类加载路径"></a>类加载路径</h2><p><strong>问题：为什么</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>即==可读取beans.xml文件？==</strong></p><p><strong>classPath()：来获取==<code>类加载路径</code>，即：运行时的实际工作路径==</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">classPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取："类加载路径"</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240110211828700.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数调用过程具体分析</title>
      <link href="/2024/02/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90/"/>
      <url>/2024/02/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p><strong>本文使用如下源程序对函数的嵌套调用进行讲解：</strong></p><p><code>stack.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">get_arr_abs_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> <span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr's abs sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">get_arr_abs_sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译生成可重定位目标文件<code>stack.o</code>：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 ctest<span class="token punctuation">]</span><span class="token comment"># gcc -c stack.c -o stack.o -g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>通过对<code>stack.o</code>文件进行反编译，得到汇编代码，再惊进行深入分析</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 ctest<span class="token punctuation">]</span><span class="token comment"># objdump -d stack.o</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">stack.o：     文件格式 elf64-x86-64Disassembly of section .text:0000000000000000 &lt;abs&gt;:   0:55                   push   %rbp   1:48 89 e5             mov    %rsp,%rbp   4:89 7d fc             mov    %edi,-0x4(%rbp)   7:83 7d fc 00          cmpl   $0x0,-0x4(%rbp)   b:79 07                jns    14 &lt;abs+0x14&gt;   d:8b 45 fc             mov    -0x4(%rbp),%eax  10:f7 d8                neg    %eax  12:eb 03                jmp    17 &lt;abs+0x17&gt;  14:8b 45 fc             mov    -0x4(%rbp),%eax  17:5d                   pop    %rbp  18:c3                   retq   0000000000000019 &lt;get_arr_abs_sum&gt;:  19:55                   push   %rbp  1a:48 89 e5             mov    %rsp,%rbp  1d:48 83 ec 20          sub    $0x20,%rsp  21:48 89 7d e8          mov    %rdi,-0x18(%rbp)  25:89 75 e4             mov    %esi,-0x1c(%rbp)  28:c7 45 fc 00 00 00 00 movl   $0x0,-0x4(%rbp)  2f:c7 45 f8 00 00 00 00 movl   $0x0,-0x8(%rbp)  36:eb 22                jmp    5a &lt;get_arr_abs_sum+0x41&gt;  38:8b 45 f8             mov    -0x8(%rbp),%eax  3b:48 98                cltq     3d:48 8d 14 85 00 00 00 lea    0x0(,%rax,4),%rdx  44:00   45:48 8b 45 e8          mov    -0x18(%rbp),%rax  49:48 01 d0             add    %rdx,%rax  4c:8b 00                mov    (%rax),%eax  4e:99                   cltd     4f:31 d0                xor    %edx,%eax  51:29 d0                sub    %edx,%eax  53:01 45 fc             add    %eax,-0x4(%rbp)  56:83 45 f8 01          addl   $0x1,-0x8(%rbp)  5a:8b 45 f8             mov    -0x8(%rbp),%eax  5d:3b 45 e4             cmp    -0x1c(%rbp),%eax  60:7c d6                jl     38 &lt;get_arr_abs_sum+0x1f&gt;  62:8b 45 fc             mov    -0x4(%rbp),%eax  65:89 c6                mov    %eax,%esi  67:bf 00 00 00 00       mov    $0x0,%edi  6c:b8 00 00 00 00       mov    $0x0,%eax  71:e8 00 00 00 00       callq  76 &lt;get_arr_abs_sum+0x5d&gt;  76:90                   nop  77:c9                   leaveq   78:c3                   retq   0000000000000079 &lt;main&gt;:  79:55                   push   %rbp  7a:48 89 e5             mov    %rsp,%rbp  7d:48 83 ec 30          sub    $0x30,%rsp  81:89 7d dc             mov    %edi,-0x24(%rbp)  84:48 89 75 d0          mov    %rsi,-0x30(%rbp)  88:c7 45 e0 ff ff ff ff movl   $0xffffffff,-0x20(%rbp)  8f:c7 45 e4 02 00 00 00 movl   $0x2,-0x1c(%rbp)  96:c7 45 e8 fd ff ff ff movl   $0xfffffffd,-0x18(%rbp)  9d:c7 45 ec 04 00 00 00 movl   $0x4,-0x14(%rbp)  a4:c7 45 f0 fb ff ff ff movl   $0xfffffffb,-0x10(%rbp)  ab:48 8d 45 e0          lea    -0x20(%rbp),%rax  af:be 05 00 00 00       mov    $0x5,%esi  b4:48 89 c7             mov    %rax,%rdi  b7:e8 00 00 00 00       callq  bc &lt;main+0x43&gt;  bc:b8 00 00 00 00       mov    $0x0,%eax  c1:c9                   leaveq   c2:c3                   retq <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="进程的虚拟地址空间"><a href="#进程的虚拟地址空间" class="headerlink" title="进程的虚拟地址空间"></a>进程的虚拟地址空间</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240206211348674.png" alt="进程的虚拟地址空间"></p><hr><h2 id="分析main函数"><a href="#分析main函数" class="headerlink" title="分析main函数"></a>分析main函数</h2><p><strong>step1：先保存<code>存栈基bp</code>和<code>栈帧sp</code>，为main函数预分配48B栈空间</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">79:55                   push   %rbp7a:48 89 e5             mov    %rsp,%rbp7d:48 83 ec 30          sub    $0x30,%rsp #0x30即48B地址空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>step2：在x86-64中，函数的第一个参数通常被传递给 <code>%edi</code> 寄存器；函数的第二个参数通常被传递给 <code>%rsi</code> 寄存器</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">81:89 7d dc             mov    %edi,-0x24(%rbp)84:48 89 75 d0          mov    %rsi,-0x30(%rbp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>step3：初始化arr数组</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">88:c7 45 e0 ff ff ff ff movl   $0xffffffff,-0x20(%rbp) #arr的首地址8f:c7 45 e4 02 00 00 00 movl   $0x2,-0x1c(%rbp)96:c7 45 e8 fd ff ff ff movl   $0xfffffffd,-0x18(%rbp)9d:c7 45 ec 04 00 00 00 movl   $0x4,-0x14(%rbp)a4:c7 45 f0 fb ff ff ff movl   $0xfffffffb,-0x10(%rbp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>step4：即将进行函数调用，先将get_arr_abs_sum(int * arr, int len)的参数放入寄存器中。<code>%esi</code>存放的是len；<code>%rax</code>和<code>%rdi</code>存放的是arr的地址</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">ab:48 8d 45 e0          lea    -0x20(%rbp),%raxaf:be 05 00 00 00       mov    $0x5,%esib4:48 89 c7             mov    %rax,%rdi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240207104839753.png" alt=""></p><hr><h2 id="main调用get-arr-abs-sum"><a href="#main调用get-arr-abs-sum" class="headerlink" title="main调用get_arr_abs_sum"></a>main调用get_arr_abs_sum</h2><p><strong>step1：<code>call</code>指令实现函数<code>跳转</code>&amp;<code>返回</code>：</strong></p><ol><li><strong>将<code>call</code>指令的下一条地址入栈</strong></li><li><strong><code>%rip</code>指向<code>main+0x43</code>处</strong></li></ol><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">b7:e8 00 00 00 00       callq  bc &lt;main+0x43&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240207105119113.png" alt="call指令的2步操作"></p><p><strong>step2：get_arr_abs_sum函数开始执行。<code>push   %rbp</code>将<code>%rbp</code>指向栈顶，且内容为上层函数的栈基址<code>bp</code>。再开辟32B的栈空间作为get_arr_abs_sum函数的栈帧。</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000000019 &lt;get_arr_abs_sum&gt;:  19:55                   push   %rbp  1a:48 89 e5             mov    %rsp,%rbp  1d:48 83 ec 20          sub    $0x20,%rsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240207111709789.png" alt=""></p><p><strong>step3：get_arr_abs_sum循环调用abs函数</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">21:48 89 7d e8          mov    %rdi,-0x18(%rbp)25:89 75 e4             mov    %esi,-0x1c(%rbp)28:c7 45 fc 00 00 00 00 movl   $0x0,-0x4(%rbp)2f:c7 45 f8 00 00 00 00 movl   $0x0,-0x8(%rbp)36:eb 22                jmp    5a &lt;get_arr_abs_sum+0x41&gt;38:8b 45 f8             mov    -0x8(%rbp),%eax3b:48 98                cltq   3d:48 8d 14 85 00 00 00 lea    0x0(,%rax,4),%rdx44:00 45:48 8b 45 e8          mov    -0x18(%rbp),%rax49:48 01 d0             add    %rdx,%rax4c:8b 00                mov    (%rax),%eax4e:99                   cltd   4f:31 d0                xor    %edx,%eax51:29 d0                sub    %edx,%eax53:01 45 fc             add    %eax,-0x4(%rbp)56:83 45 f8 01          addl   $0x1,-0x8(%rbp)5a:8b 45 f8             mov    -0x8(%rbp),%eax5d:3b 45 e4             cmp    -0x1c(%rbp),%eax60:7c d6                jl     38 &lt;get_arr_abs_sum+0x1f&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240207122222011.png" alt=""></p><hr><h2 id="get-arr-abs-sum调用abs结束"><a href="#get-arr-abs-sum调用abs结束" class="headerlink" title="get_arr_abs_sum调用abs结束"></a>get_arr_abs_sum调用abs结束</h2><blockquote><p>假设此时是for循环的最后一次调用</p></blockquote><p><strong>step1：abs执行<code>ret</code>指令：</strong></p><ol><li><strong>释放栈空间，再将栈顶的返回地址<code>get_arr_abs_sum_call_next_ip</code>从栈中弹出，</strong></li><li><strong>并写入<code>%rip</code>寄存器中</strong></li></ol><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">18:c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240207123243410.png" alt=""></p><hr><h2 id="main调用get-arr-abs-sum结束"><a href="#main调用get-arr-abs-sum结束" class="headerlink" title="main调用get_arr_abs_sum结束"></a>main调用get_arr_abs_sum结束</h2><p><strong>step1：get_arr_abs_sum执行<code>ret</code>指令：</strong></p><ol><li><strong>释放栈空间，再将栈顶的返回地址<code>main_call_next_ip</code>从栈中弹出，</strong></li><li><strong>并写入<code>%rip</code>寄存器中</strong></li></ol><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">78:c3                   retq  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240207123632744.png" alt=""></p><hr><h2 id="进程结束，返回结果给进程调度器"><a href="#进程结束，返回结果给进程调度器" class="headerlink" title="进程结束，返回结果给进程调度器"></a>进程结束，返回结果给进程调度器</h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">bc:b8 00 00 00 00       mov    $0x0,%eaxc1:c9                   leaveq c2:c3                   retq <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gdb调试</title>
      <link href="/2024/02/05/gdb%E8%B0%83%E8%AF%95/"/>
      <url>/2024/02/05/gdb%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h1><p><strong>本文以如下源代码为例讲述gdb调试工具的基本使用：</strong></p><p><code>test.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"hello "</span><span class="token punctuation">;</span><span class="token keyword">int</span> var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">"hellod"</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init_arr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_arr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'M'</span><span class="token punctuation">;</span>    <span class="token function">select_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----------------after sort-----------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_arr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="编译时加上-g参数得到的可执行文件，内部包含调试信息"><a href="#编译时加上-g参数得到的可执行文件，内部包含调试信息" class="headerlink" title="编译时加上-g参数得到的可执行文件，内部包含调试信息"></a>编译时加上<code>-g</code>参数得到的可执行文件，内部包含调试信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 gdbtest<span class="token punctuation">]</span><span class="token comment"># gcc test.c -o a.out -g</span><span class="token punctuation">[</span>root@lhyEdu01 gdbtest<span class="token punctuation">]</span><span class="token comment"># gcc test.c -o a_no_debug.out</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240205230037483.png" alt="多出来的部分为编译时产生的调试信息" style="zoom:67%;" /></p><p><strong>显然，编译带有调试信息的目标文件占用空间更大。</strong></p><h2 id="开启gdb"><a href="#开启gdb" class="headerlink" title="开启gdb"></a>开启gdb</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb a.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/%E5%BC%80%E5%90%AFgdb.gif" alt="开启gdb" style="zoom:67%;" /></p><hr><h2 id="显示源码-默认10行"><a href="#显示源码-默认10行" class="headerlink" title="显示源码(默认10行)"></a>显示源码(默认10行)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">list line_number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_list.gif" alt="显示源码(默认10行)" style="zoom:67%;" /></p><h2 id="继续显示"><a href="#继续显示" class="headerlink" title="继续显示"></a>继续显示</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">list <span class="token comment">#可缩写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_l2.gif" alt="继续显示" style="zoom:67%;" /></p><hr><h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">break</span> line_number <span class="token comment">#可缩写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_break.gif" alt="" style="zoom:67%;" /></p><h2 id="查看断点信息表"><a href="#查看断点信息表" class="headerlink" title="查看断点信息表"></a>查看断点信息表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">info b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_info.gif" style="zoom:67%;" /></p><h2 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run <span class="token comment">#可缩写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_run.gif" alt="此时只是定位到断点，还未执行" style="zoom:67%;" /></p><h2 id="进入断点-step-into"><a href="#进入断点-step-into" class="headerlink" title="进入断点(step into)"></a>进入断点(step into)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">step <span class="token comment">#可缩写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_step.gif" alt="" style="zoom:67%;" /></p><h2 id="执行下一步-step-next"><a href="#执行下一步-step-next" class="headerlink" title="执行下一步(step next)"></a>执行下一步(step next)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">next <span class="token comment">#可缩写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_next.gif" alt="" style="zoom:67%;" /></p><h2 id="查看变量的值"><a href="#查看变量的值" class="headerlink" title="查看变量的值"></a>查看变量的值</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">p 变量名 <span class="token comment">#print缩写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_p.gif" alt="" style="zoom:67%;" /></p><h2 id="查看变量类型"><a href="#查看变量类型" class="headerlink" title="查看变量类型"></a>查看变量类型</h2><pre class="line-numbers language-none"><code class="language-none">ptype 变量名 #print缩写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_ptype.gif" style="zoom:67%;" /></p><h2 id="查看当前存活的栈帧列表"><a href="#查看当前存活的栈帧列表" class="headerlink" title="查看当前存活的栈帧列表"></a>查看当前存活的栈帧列表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240206105542177.png" alt="" style="zoom:67%;" /></p><p><a href="[【CSAPP-深入理解计算机系统】3-7. 过程（函数调用）_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV19X4y1P7Pn/?spm_id_from=333.337.search-card.all.click&amp;vd_source=59094c15e7c1087c27f04ff9f927d393">细节内容查看：过程调用</a>)</p><h2 id="切换栈帧"><a href="#切换栈帧" class="headerlink" title="切换栈帧"></a>切换栈帧</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">frame bt指令得到的栈帧编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_frame.gif" alt="" style="zoom:67%;" /></p><h2 id="跳出断点-step-out"><a href="#跳出断点-step-out" class="headerlink" title="跳出断点(step out)"></a>跳出断点(step out)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">finsih<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_finish.gif" alt="" style="zoom:67%;" /></p><hr><h2 id="跳出断点并继续执行"><a href="#跳出断点并继续执行" class="headerlink" title="跳出断点并继续执行"></a>跳出断点并继续执行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240205225520944.png" alt="" style="zoom: 67%;" /></p><hr><h2 id="处理段错误-无行号提示"><a href="#处理段错误-无行号提示" class="headerlink" title="处理段错误(无行号提示)"></a>处理段错误(无行号提示)</h2><p>以<code>test.c</code>源程序为例，在main函数内添加如下错误，</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240206093814809.png" alt="常量区数据不可被修改" style="zoom: 67%;" /></p><p>编译后运行，<strong>报错：<code>段错误</code>，且无提示行号，无法通过行号debug</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240206094111744.png" alt="" style="zoom: 67%;" /></p><p><strong>解决：开启gdb后直接执行<code>run</code>指令，程序停止处即为<code>段错误</code>位置</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_r2.gif" alt="" style="zoom:67%;" /></p><hr><h2 id="调试带有命令行参数的可执行文件"><a href="#调试带有命令行参数的可执行文件" class="headerlink" title="调试带有命令行参数的可执行文件"></a>调试带有命令行参数的可执行文件</h2><p>修改<code>test.c</code>源程序的main函数，</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240206100409832.png" alt=""></p><h3 id="直接运行："><a href="#直接运行：" class="headerlink" title="直接运行："></a>直接运行：</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240206100937068.png" alt="" style="zoom: 67%;" /></p><h3 id="gdb调试中运行："><a href="#gdb调试中运行：" class="headerlink" title="gdb调试中运行："></a>gdb调试中运行：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> args argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/gdb_set_args.gif" alt="" style="zoom:67%;" /></p><hr><h2 id="退出gdb"><a href="#退出gdb" class="headerlink" title="退出gdb"></a>退出gdb</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言工具链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chapter7—链接</title>
      <link href="/2024/02/04/chapter7%E2%80%94%E9%93%BE%E6%8E%A5/"/>
      <url>/2024/02/04/chapter7%E2%80%94%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="chapter7—链接"><a href="#chapter7—链接" class="headerlink" title="chapter7—链接"></a>chapter7—链接</h1><p>已知一个main.c文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token number">1</span> #include<span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span> <span class="token number">2</span> <span class="token comment">//count和value两个全局变量</span> <span class="token number">3</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token number">5</span>  <span class="token number">6</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum is:%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span> <span class="token number">9</span> <span class="token number">10</span><span class="token number">11</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">12</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">13</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">14</span>         <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">15</span> <span class="token number">16</span>         <span class="token function">func</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>gcc -c main.c</code>得到可重定位二进制文件，再根据<code>wc -c main.o</code>查看main.o文件的大小</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># wc <span class="token operator">-</span>c main<span class="token punctuation">.</span>o<span class="token number">1856</span> main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>readelf -h main.o</code>查看ELF可重定位目标文件的ELF头(ELF Header)的具体内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>o<span class="token comment">//-h：只显示ELF Header的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>oELF 头：  Magic：  <span class="token number">7f</span> <span class="token number">45</span> <span class="token number">4</span>c <span class="token number">46</span> <span class="token number">02</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>   类别<span class="token operator">:</span>                              ELF64  数据<span class="token operator">:</span>                              <span class="token number">2</span> 补码，小端序 <span class="token punctuation">(</span>little endian<span class="token punctuation">)</span>  版本<span class="token operator">:</span>                              <span class="token number">1</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span>  OS<span class="token operator">/</span>ABI<span class="token operator">:</span>                            UNIX <span class="token operator">-</span> System V  ABI 版本<span class="token operator">:</span>                          <span class="token number">0</span>  类型<span class="token operator">:</span>                              <span class="token function">REL</span> <span class="token punctuation">(</span>可重定位文件<span class="token punctuation">)</span>  系统架构<span class="token operator">:</span>                          Advanced Micro Devices X86<span class="token operator">-</span><span class="token number">64</span>  版本<span class="token operator">:</span>                              <span class="token number">0x1</span>  入口点地址：              <span class="token number">0x0</span>  程序头起点：              <span class="token number">0</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  Start of section headers<span class="token operator">:</span>          <span class="token number">1024</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  标志：             <span class="token number">0x0</span>  本头的大小：       <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  程序头大小：       <span class="token number">0</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  Number of program headers<span class="token operator">:</span>         <span class="token number">0</span>  节头大小：         <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  节头数量：         <span class="token number">13</span>  字符串表索引节头： <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可重定位目标文件-ELF文件"><a href="#可重定位目标文件-ELF文件" class="headerlink" title="可重定位目标文件(ELF文件)"></a>可重定位目标文件(ELF文件)</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228190228140.png" alt="ELF文件"></p><h2 id="section-节-的具体内容"><a href="#section-节-的具体内容" class="headerlink" title="section(节)的具体内容"></a>section(节)的具体内容</h2><ol><li><strong><code>.text</code>：已编译程序的及其代码</strong></li><li><strong><code>.rodata</code>：只读数据，如：prinf函数内的格式串</strong></li><li><strong><code>.data</code>：<u>已初始化</u>的全局和静态C变量</strong></li><li><strong><code>.bss(Better Save Space)</code>：<u>未初始化</u>的全局和静态C变量</strong></li><li><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228191717559.png" style="zoom: 33%;" /></li></ol><h2 id="符号-amp-符号表-symtab）"><a href="#符号-amp-符号表-symtab）" class="headerlink" title="符号&amp;符号表(.symtab）"></a>符号&amp;符号表(.symtab）</h2><p><strong>对于每一个可重定位目标文件(ELF)m，都有一个符号表(.symtab节中)。在链接器的上下文中，有三种不同的符号：</strong></p><ol><li><strong><code>全局符号(Global Symbols)</code>：模块m定义+能被其他模块引用</strong></li><li><strong><code>外部符号(Externals Symbols)</code>：其他模块定义+能被模块m引用</strong></li><li><strong><code>局部符号(Local Symbols)</code>：只被模块m定义+其他模块不能引用。如：任何带有static修饰的全局变量或函数 都是模块私有的，其他模块不能访问，类似Java的private关键字</strong></li></ol><blockquote><p><strong>注：</strong>.symtab节的符号表不包含<strong>本地非静态局部变量</strong>，因为其在<strong>栈中被管理</strong>！</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>s main<span class="token punctuation">.</span>oSymbol table <span class="token char">'.symtab'</span> contains <span class="token number">16</span> entries<span class="token operator">:</span>   Num<span class="token operator">:</span>    Value          Size Type    Bind   Vis      Ndx Name     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  LOCAL  DEFAULT  UND      <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> FILE    LOCAL  DEFAULT  ABS main<span class="token punctuation">.</span>c     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">1</span>      <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">3</span>      <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">4</span>      <span class="token number">5</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">5</span>      <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">3</span> a<span class="token punctuation">.</span><span class="token number">2185</span>     <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">4</span> b<span class="token punctuation">.</span><span class="token number">2186</span>     <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">7</span>      <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">8</span>     <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">6</span>     <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT    <span class="token number">3</span> count    <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT  COM value    <span class="token number">13</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>    <span class="token number">33</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> func    <span class="token number">14</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  GLOBAL DEFAULT  UND printf    <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0000000000000021</span>    <span class="token number">55</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Type：FUNC-函数、OBJECT-变量数组等数据对象</p><p>Value：表示函数相对于.text section起始位置的偏移量</p><p>Bind：作用范围。局部/全局</p><p>Ndx：表示节头部表的section的数组索引。如：Ndx=1表示在.text节；Ndx=3表示在.data节</p><blockquote><p>Ndx表示中有<strong>3个伪节：</strong></p><ul><li><strong><code>ABS</code>：不该被重定位的符号</strong></li><li><strong><code>UNDEF</code>：未定义的符号</strong></li><li><strong><code>COMMON</code>：未被分配位置的初始化的数据目标</strong></li></ul><p><strong>注意：变量count和value属于不同section的原因：count初始化了，value没有初始化</strong></p><p><strong>COMMON：未初始化的全局变量；.bss节：未初始化的静态变量+初始化为0的静态/全局变量</strong></p></blockquote></blockquote><h3 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h3><p>对以下源文件进行编译linkerror.c进行编译汇编，生成二进制文件linkerror.o。</p><p>其中，该代码<strong>仅对函数foo进行声明</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gcc -c linkerror.c</code>，编译可以通过！<font size=3 color=red>当编译器遇到一个不是在当前模块定义的符号(变量/函数名)时，会假设该符号是在在其他模块在定义的。</font></p><font size=3 color=red>但是链接器(ld)无法解析对foo的引用时，就会终止！</font><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>Wall <span class="token operator">-</span>Og <span class="token operator">-</span>o linkerror linkerror<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>cc5EcYAf<span class="token punctuation">.</span>o：在函数‘main’中：linkerror<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x5</span><span class="token punctuation">)</span>：对‘foo’未定义的引用collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><font size=4 color=red>引出问题："全局符号"在多个可重定位目标文件中【同名定义】，如何处理？</font><p><strong>编译时，编译器向汇编器输出每个全局符号的类型：</strong></p><ul><li><strong><code>Strong symbols(强符号)</code>：函数和已初始化的全局变量</strong></li><li><strong><code>Weak symbols(弱符号)</code>：未初始化的全局变量</strong></li></ul><p><strong>汇编时，汇编器将强弱信息隐含地编码在ELF的符号表(.symtab)里</strong></p><p><strong>链接时，链接器根据以下3种情况处理多重定义的全局符号：</strong></p><ol><li><p><strong>规则1：不允许有多个同名的强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo1<span class="token punctuation">.</span>c bar1<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>ccSHeCo9<span class="token punctuation">.</span>o：在函数‘main’中：bar1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">:</span> main 的多重定义<span class="token operator">/</span>tmp<span class="token operator">/</span>ccnLYE7L<span class="token punctuation">.</span>o<span class="token operator">:</span>foo1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span>：第一次在此定义collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>规则2：一个强符号与多个弱符号同名，那么选择强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo2.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar2.c*/</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo2<span class="token punctuation">.</span>c bar2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outx <span class="token operator">=</span> <span class="token number">15212</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数f将x的值由15213改为15212。一个模块(bar2.c)里的x未初始化(弱符号)，链接器会安静地选择其他模块(foo2.c)里定义的强符号</p></li><li><p><strong>规则3：如果有多个弱符号同名，任意选择一个</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo3.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = 0x%x y = 0x%x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar3.c*/</span><span class="token keyword">double</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo3<span class="token punctuation">.</span>c bar3<span class="token punctuation">.</span>c<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>ld<span class="token operator">:</span> Warning<span class="token operator">:</span> alignment <span class="token number">4</span> of symbol `x' in <span class="token operator">/</span>tmp<span class="token operator">/</span>ccWPcPGG<span class="token punctuation">.</span>o is smaller than <span class="token number">8</span> in <span class="token operator">/</span>tmp<span class="token operator">/</span>cc3MhEaU<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="静态库-static-library"><a href="#静态库-static-library" class="headerlink" title="静态库(static library)"></a>静态库(static library)</h4><p>在共享库出现之前，<strong>公用功能(atoi/printf/scanf/strcpy/rand等)</strong>是以<strong>静态库</strong>的形式存在的，它把<strong>通用功能模块的多个目标文件打包在一起形成<code>*.a</code>的文件(如libc.a)</strong>，用到它的程序只需要在链接时指定这个库文件，<strong>链接器就会从这个库中抽取出用到的功能代码拷贝到目标程序中</strong>，而不需要每次都对这些通用功能代码重新编译。</p><p><strong>对文件<em>addvec.c</em>和<em>multvec.c</em>进行编译<code>gcc -c addvec.c multvec.c</code>，得到目标模块</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> addcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                addcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> multcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">multvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                multcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用<code>AR工具</code>将两个目标模块<em>addvec.o multvec.o</em>打包成静态库(<code>ar rcs libxxx.a xxx.o xxx.o</code>)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># ar rcs linvector<span class="token punctuation">.</span>a addvec<span class="token punctuation">.</span>o multvec<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以main2.c文件为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"vector.h"</span></span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addvec</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = [%d %d]\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中”vector.h”中包含对addvec函数的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编译和链接输入文件main2.o和libvector.a</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/1125E426BCF8DCF854B292C45FC50D8A.jpg" style="zoom:20%;" /></p><blockquote><p><strong>链接器判断main2.o引用了addvec.o定义的addvec符号，所以复制addvec.o到可执行文件。</strong></p><p><strong>因为程序未引用multvec.0定义的符号，所以链接器就不会复制这个模块到可执行文件。</strong></p><p><strong>此外，链接器还会复制libc.a中的printf.o等C系统运行时的其他模块。</strong></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span><span class="token keyword">static</span> <span class="token operator">-</span>o prog2c main2<span class="token punctuation">.</span>o <span class="token punctuation">.</span><span class="token operator">/</span>libvector<span class="token punctuation">.</span>a<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>prog2c z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p>当汇编器生成一个目标模块时，它并不知道数据和代码最终将放在内存中的什么位置。也不知道本模块引用的外部定义函数或全局变量的最终位置。</p><p><strong><font size=3 color=red>因此，汇编器遇到对最终位置未知的目标引用，就会生成一个【重定位条目】，告诉链接器再将目标文件合并为可执行文件时如何修改这个引用。</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*重定位条目-数据结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> offset<span class="token punctuation">;</span><span class="token comment">//被修改的引用的节偏移量</span><span class="token keyword">long</span> type<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token comment">//告知链接器如何修改新的引用</span>    <span class="token comment">//主要两种：1.R_X86_64_PC32(PC相对地址)2.R_X86_64_32(绝对地址)</span>symbol<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//表示被修改的引用是哪个符号</span><span class="token keyword">long</span> addend<span class="token punctuation">;</span><span class="token comment">//有符号数，一些类型的重定位要使用它对被修改引用的值做偏移调整(指令长度)</span><span class="token punctuation">&#125;</span> ELF_Rela<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>代码的重定位条目存放在<code>.rel.text</code>中</strong></p><p><strong>已初始化数据的重定位条目存放在<code>.rel.data</code>中</strong></p></blockquote><h4 id="重定位算法"><a href="#重定位算法" class="headerlink" title="重定位算法"></a>重定位算法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">foreach section s <span class="token punctuation">&#123;</span>foreach relocation entry r <span class="token punctuation">&#123;</span>refptr <span class="token operator">=</span> s <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*1.重定位PC相对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_PC32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>refaddr <span class="token operator">=</span> <span class="token function">ADDR</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*refaddr:引用的运行时地址*/</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend <span class="token operator">-</span> refaddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*2.重定位绝对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="①重定位PC相对引用"><a href="#①重定位PC相对引用" class="headerlink" title="①重定位PC相对引用"></a>①重定位PC相对引用</h5><p><strong>例：对源文件<em>main.c</em>和<em>sum.c</em>进行反汇编：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再用<code>objdump -dx main.o</code>对main,o进行反编译后结果：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># objdump <span class="token operator">-</span>dx main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231229213448474.png" style="zoom: 50%;" /></p><p><strong>函数main调用sum函数，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xf</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> sumr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_PC32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><u>这些字段告诉链接器修改开始于0xf处的32位PC相对引用，这样在运行时它会指向sum例程</u>。假设链接器已确定：</strong></p><ul><li><strong><code>ADDR(s) = ADDR(.text)</code> = 0x400d0</strong></li><li><strong><code>ADDR(r.symbol) = ADDR(sum)</code> = 0x400e8</strong></li></ul><p><strong>使用<code>重定位算法</code>知：</strong></p><ol><li><p><strong>链接器首先算出引用的<u>运行时地址</u>：</strong></p><p><strong>ref_addr = ADDR(s) + r.offset = 0x4004d0 + 0xf = 0x4004df</strong> </p></li><li><p><strong>然后更新该引用，使得它再运行时指向sum程序(实际就是求PC的offset)</strong></p><p><strong>ref_ptr = ADDR(sum) - ref_addr + r.addend = 0x4004e8 - 0x4004df +(-4) = 0x5</strong></p></li></ol><p>得到的可执行文件中，call指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>de<span class="token operator">:</span>e8 <span class="token number">05</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       callq  <span class="token number">4004e8</span> <span class="token operator">&lt;</span>sum<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="②重定位绝对引用"><a href="#②重定位绝对引用" class="headerlink" title="②重定位绝对引用"></a>②重定位绝对引用</h5><p><strong>mov指令将array地址(32位立即数)复制到寄存器%edi中，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xa</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> arrayr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些字段告诉链接器修改开始于0xa处的32位绝对引用，这样在运行时它会指向array的第一个字节。假设链接器已确定：</p><ul><li><strong><code>ADDR(r.symbol) = ADDR(array)</code> = 0x601018</strong></li></ul><p>链接器修改第13行的引用：</p><p><strong>*ref_ptr = (unsigned) ((ADDR(r.symbol) + r.addend)) = (unsigned) (0x601018 + 0) = 0x601018</strong></p><p>得到的可执行文件中，机器指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>d9<span class="token operator">:</span>bf <span class="token number">18</span> <span class="token number">10</span> <span class="token number">60</span> <span class="token number">00</span>       mov $<span class="token number">0x601018</span><span class="token punctuation">,</span> <span class="token operator">%</span>edi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/D0D016AAD0F392AC3C3FFCEFEFAA42CC.jpg" alt=""></p><h3 id="可执行目标文件-amp-加载过程"><a href="#可执行目标文件-amp-加载过程" class="headerlink" title="可执行目标文件&amp;加载过程"></a>可执行目标文件&amp;加载过程</h3>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态库与共享库</title>
      <link href="/2024/02/04/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%BA%93/"/>
      <url>/2024/02/04/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="静态库与共享库"><a href="#静态库与共享库" class="headerlink" title="静态库与共享库"></a>静态库与共享库</h1><blockquote><p>所谓<code>&quot;程序库&quot;</code>，就是<strong>包含了数据和执行码的文件。其不能单独执行，可以作为其他程序的一部分完成某些功能</strong>。</p><p>库的存在，可以使程序模块化，加快程序的再编译，可以实现代码重用，可以使得程序便于升级。</p><p><strong>程序库可分为<code>静态库(static library)</code>和<code>共享库(shared object)</code>。两者本质区别：该库是否被编译进目标（程序）内部。</strong></p></blockquote><hr><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>这类库在<strong>编译的时候</strong>会直接整合到目标程序中，所以利用静态函数库编译成的文件会比较大。<strong>应用于对空间要求低，时间要求高的程序中</strong>。</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204092840853.png" alt="静态库文件50MB,100个程序则占用50GB空间" style="zoom: 40%;" /></p><ul><li>优点：编译成功的可执行文件可以独立运行，而不再需要向外部要求读取函数库的内容</li><li>缺点：相同的库文件数据可能在内存中被加载多份，消耗系统资源，浪费内存；函数库更新，需要重新编译</li></ul><h3 id="应用实例—生成静态库"><a href="#应用实例—生成静态库" class="headerlink" title="应用实例—生成静态库"></a>应用实例—生成静态库</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*add.c*/</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*sub.c*/</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*div.c*/</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>step1：对<code>add.c</code>和<code>sub.c</code>和<code>div.c</code>三个文件进行编译，得到3个<strong>可重定位目标文件</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204100758657.png" alt="3个可重定位目标文件" style="zoom: 67%;" /></p><p>step2：使用<code>ar工具</code>将3个可重定位目标文件生成为1个<strong>静态库</strong><code>libmymath.a</code>。</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204101129292.png" alt="ar rcs libxxx.a xxx.o ... xx.o" style="zoom:67%;" /></p><p>step3：<strong>在<code>math.c</code>程序编译过程中使用静态库<code>libmymath.a</code></strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204110237451.png" alt="gcc math.c libmymath.a -o math" style="zoom:67%;" /></p><h3 id="隐式声明"><a href="#隐式声明" class="headerlink" title="隐式声明"></a>隐式声明</h3><p>在C语言中，函数在调用前不一定非要声明。如果没有声明，那么<strong>编译器会自动按照一种隐式声明的规则，为调用函数的C代码产生汇编代码</strong>。</p><p>单纯的编译上述<code>math.c</code>源代码，并没有任何报错，只是在链接阶段若找不到名为add/sub/div的函数体则报错。之所以编译不会报错，是因为C语言规定，<strong>对于没有声明的函数，自动使用隐式声明</strong>。</p><p>编译<code>math.c</code>源代码，加上警告信息<code>gcc math.c libmymath.a -o math -Wall</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 staticLib<span class="token punctuation">]</span><span class="token comment"># gcc math.c libmymath.a -o math -Wall</span>math.c: 在函数‘main’中:math.c:6:2: 警告：隐式声明函数‘add’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  printf<span class="token punctuation">(</span><span class="token string">"%d + %d = %d<span class="token entity" title="\n">\n</span>"</span>, a, b, add<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span><span class="token punctuation">;</span>  ^math.c:7:2: 警告：隐式声明函数‘sub’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  printf<span class="token punctuation">(</span><span class="token string">"%d - %d = %d<span class="token entity" title="\n">\n</span>"</span>, a, b, sub<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span><span class="token punctuation">;</span>  ^math.c:8:2: 警告：隐式声明函数‘div’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  printf<span class="token punctuation">(</span><span class="token string">"%d / %d = %d<span class="token entity" title="\n">\n</span>"</span>, a, b, div<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span><span class="token punctuation">;</span>  ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译通过！并没有任何报错，只是在链接阶段若找不到名为add/sub/div的函数体则报错。</p><p>之所以编译不会报错，是因为C语言规定，<strong>对于没有声明/定义的函数，自动使用隐式声明</strong>。相当于变成了如下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//编译器的隐式声明:int function_name(int, ... parameter_type);</span><span class="token comment">//默认返回值为int类型，对函数参数不关心，若函数实际返回值为其他类型，则链接时报错</span><span class="token comment">//隐式声明的函数原型与库函数完全相同，则链接运行没有问题(如本例)</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示声明"><a href="#显示声明" class="headerlink" title="显示声明"></a>显示声明</h3><p>隐式声明给程序员带来了各种困惑，给程序的稳定性带来了非常坏的影响。一般使用显示声明，将函数定义/声明放入头文件中，在程序中引入头文件：</p><p>头文件<code>mymath.h</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 加入的三行：头文件守卫 *多个c程序都包含该头文件引用，编译时带来大量声明冲突 * 加入头文件首位：避免多次包含 * */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MYMATH_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MYMATH_H_</span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源程序<code>math.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mymath.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204171348932.png" alt="编译运行正常" style="zoom: 67%;" /></p><hr><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p>动态函数库在<strong>编译的时候，在程序里只有一个“指向”的位置而已</strong>，也就是说当可执行文件需要使用到函数库的机制时，程序才会去读取函数库来使用。<strong>应用于对时间要求低，空间要求高的程序中。</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204093255920.png" alt="100个程序运行时共同使用1个500MB的共享库" style="zoom:35%;" /></p><ul><li>优点：可实现不同进程间的资源共享；动态库升级简单，只需要替换库文件，无需重新编译应用程序</li><li>缺点：加载速度比静态库慢；发布程序需要提供依赖的动态库</li></ul><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>step1：对<code>add.c</code>和<code>sub.c</code>和<code>div.c</code>三个文件进行编译，得到3个<strong>可重定位目标文件(.o)</strong></p><blockquote><p><strong>注意：动态库所需的可重定位目标文件与静态库所需的可重定位目标文件不同！</strong></p><ul><li>静态库所用的<code>.o</code>文件中的调用函数地址：<strong>编译时生成(相对于main的相对寻址)</strong></li><li>动态库所用的<code>.o</code>文件中的调用函数地址：<strong>运行时生成！</strong></li></ul><p><strong>因此编译时需要加上参数：<code>-fPIC</code>!!!!</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dymamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -c add.c -o add.o -fPIC</span><span class="token punctuation">[</span>root@lhyEdu01 dymamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -c sub.c -o sub.o -fPIC</span><span class="token punctuation">[</span>root@lhyEdu01 dymamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -c div.c -o div.o -fPIC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204223416243.png" alt="查看结果：编译成功！" style="zoom:80%;" /></p><p>step2：<strong>使用<code>gcc -shared -o libxxx.so xxx.o xxx.o</code>制作动态库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dynamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -shared -o libmymath.so add.o sub.o div.o</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204224939797.png" alt="动态库libmymath.so制作成功" style="zoom:80%;" /></p><p>step3：编译可执行程序时，指定所用的动态库<code>gcc myth.c -o a.out -lmymath -L ./ 头文件</code>。</p><blockquote><p><strong>-l：指定库名（libxxx.so的xxx是库名）</strong></p><p><strong>-L：指定库路径</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dynamicLib<span class="token punctuation">]</span><span class="token comment"># gcc math.c -o math.out -lmymath -L./ mymath.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204225104876.png" alt="编译成功:math.out"></p><p>step4：<code>math.out</code>运行…<strong>失败！</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204225710207.png" alt="运行失败！！！"></p><blockquote><p><strong>下文分析运行失败原因</strong></p></blockquote><h3 id="原因：链接器-amp-动态链接器"><a href="#原因：链接器-amp-动态链接器" class="headerlink" title="原因：链接器&amp;动态链接器"></a>原因：链接器&amp;动态链接器</h3><blockquote><p><strong>链接器&amp;动态链接器的关系：张三和张三丰、雷锋和雷峰塔，没有关系</strong></p><ul><li><strong>链接器</strong>：工作于链接阶段，工作时需要 -l 和 -L</li><li><strong>动态链接器</strong>：工作于程序运行阶段，工作时需要提供动态库所在目录位置。<strong>通过改变环境变量：<code>export LD_LIBRARY_PATH=动态库所在路径</code>；或者动态库使用绝对路径</strong></li></ul></blockquote><p><strong>方法1：通过改变环境变量</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dynamicLib<span class="token punctuation">]</span><span class="token comment"># export LD_LIBRARY_PATH=/unix/dynamicLib</span><span class="token comment">#注意：环境变量只是暂时生效，终端重启后失效！</span><span class="token comment">#永久改变需要更爱配置文件:vim ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204231119298.png" alt="运行成功" style="zoom: 67%;" /></p><p><strong>方法2：动态库使用绝对路径</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204232632451.png" alt="运行成功"></p><hr><h2 id="扩展讲解：程序的地址空间"><a href="#扩展讲解：程序的地址空间" class="headerlink" title="扩展讲解：程序的地址空间"></a>扩展讲解：程序的地址空间</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240205092822703.png" alt="程序的虚拟内存空间"></p><p><a href="https://aqua555552st.github.io/2024/02/04/chapter7—链接/">细节请参考：chapter7—链接 | aqua555552st’s script</a></p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> init_val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//已初始化数据</span><span class="token keyword">int</span> uninit_val<span class="token punctuation">;</span><span class="token comment">//未初始化数据</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> env<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span><span class="token comment">//只读常量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"代码区(.text):%p\n"</span><span class="token punctuation">,</span> main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"只读常量区(.rodata):%p\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化数据(.data):%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>init_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未初始化数据(.bss):%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>uninit_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> p4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//堆区</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap addr(p1):%p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap addr(p2):%p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap addr(p3):%p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap addr(p4):%p\n"</span><span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//栈区</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr(p1):%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr(p2):%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr(p3):%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr(p4):%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//命令行参数地址</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"命令行参数地址:%p\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//环境变量地址</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"环境变量地址:%p\n"</span><span class="token punctuation">,</span> env<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240205101847459.png" alt="运行结果分析-结合程序的虚拟地址空间"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CentOS-7配置apue.h库文件</title>
      <link href="/2024/02/03/%E5%9F%BA%E4%BA%8ECentOS-7%E9%85%8D%E7%BD%AEapue-h%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>/2024/02/03/%E5%9F%BA%E4%BA%8ECentOS-7%E9%85%8D%E7%BD%AEapue-h%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="基于CentOS-7配置apue-h库文件"><a href="#基于CentOS-7配置apue-h库文件" class="headerlink" title="基于CentOS-7配置apue.h库文件"></a>基于CentOS-7配置apue.h库文件</h1><blockquote><p>在学习<strong>《UNIX环境高级编程》</strong>一书中，提供的代码用例需要先配置好书中提供的apue.h库文件后，才能正常运行。<strong>本文详细说明apue.h库文件的配置</strong>。</p></blockquote><h2 id="建立apue-h库文件的存放路径"><a href="#建立apue-h库文件的存放路径" class="headerlink" title="建立apue.h库文件的存放路径"></a>建立apue.h库文件的存放路径</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 /<span class="token punctuation">]</span><span class="token comment"># mkdir apue</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 /<span class="token punctuation">]</span><span class="token comment"># cd apue/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载apue-h库文件"><a href="#下载apue-h库文件" class="headerlink" title="下载apue.h库文件"></a>下载apue.h库文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># http://www.apuebook.com/src.3e.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># tar -zxvf src.3e.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240203185303773.png" alt="ls指令查看目录中的文件：解压成功"></p><h2 id="cd-到apue-3e目录下"><a href="#cd-到apue-3e目录下" class="headerlink" title="cd 到apue.3e目录下"></a>cd 到apue.3e目录下</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># cd apue.3e/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="CentOS-7下缺少相关的库，下载Fedora的资源进行安装："><a href="#CentOS-7下缺少相关的库，下载Fedora的资源进行安装：" class="headerlink" title="CentOS-7下缺少相关的库，下载Fedora的资源进行安装："></a>CentOS-7下缺少相关的库，下载Fedora的资源进行安装：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="然后执行："><a href="#然后执行：" class="headerlink" title="然后执行："></a>然后执行：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># yum install libbsd libbsd-devel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="执行make语句"><a href="#执行make语句" class="headerlink" title="执行make语句"></a>执行make语句</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="把make生成的apue-h与静态链接库libapue-a放到系统指定寻找的地方"><a href="#把make生成的apue-h与静态链接库libapue-a放到系统指定寻找的地方" class="headerlink" title="把make生成的apue.h与静态链接库libapue.a放到系统指定寻找的地方"></a>把make生成的apue.h与静态链接库libapue.a放到系统指定寻找的地方</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># cp ./include/apue.h /usr/include/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># cp ./lib/libapue.a /usr/local/lib/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>现在就可以使用《Unix环境高级编程》中的apue.h库了！！！下文提供测试用例</strong></p><hr><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p><strong>在根目录下创建<code>unix</code>目录，将apue学习过程中的测试用例和相关代码存放至此</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># cd /</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 /<span class="token punctuation">]</span><span class="token comment"># mkdir unix</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编写测试程序:<code>vim test.c</code>:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># vim test.c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>test.c程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"apue.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/tmp"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"chdir failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"chdir to /tmp successed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># gcc test.c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240203190837564.png" alt="ls指令查看编译后结果"></p><p><strong>运行：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># ./a.out</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240203191426759.png" alt="执行成功！"></p><hr><p><strong>运行无异常，配置成功！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5计算机网络的性能指标</title>
      <link href="/2024/02/03/1-5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
      <url>/2024/02/03/1-5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="1-5计算机网络的性能指标"><a href="#1-5计算机网络的性能指标" class="headerlink" title="1.5计算机网络的性能指标"></a>1.5计算机网络的性能指标</h1><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/89BB0CDA479AFB37D8D39F2352F32642.png" alt="img"></p><p>计算机网络的性能指标被用来<strong>从不同方面==度量计算机网络的性能==</strong>。</p><h2 id="1-5-1速率-b-s"><a href="#1-5-1速率-b-s" class="headerlink" title="1.5.1速率(b/s)"></a>1.5.1速率(b/s)</h2><blockquote><p>前置知识：</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122162733246.png" alt="image-20230122162733246"></p></blockquote><p>==<strong><code>速率:</code>数据的传送速率</strong>(每秒传送多少比特)，又称 <strong>“数据率”</strong>，<strong>“比特率”</strong>。==</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122163209554.png" alt="image-20230122163209554"></p><hr><h2 id="1-5-2带宽-b-s"><a href="#1-5-2带宽-b-s" class="headerlink" title="1.5.2带宽(b/s)"></a>1.5.2带宽(b/s)</h2><p><code>带宽(Hz)在模拟信号系统中的意义：</code>某个信号所包含的各种不同频率成分所占据的频率范围。</p><p>==<strong><code>带宽(b/s)在计算机网络中的意义：</code></strong>网络的通信线路 <strong>传送数据的能力</strong>。(<strong>=MAX IN{主机接口速率，线路速率，交换机/路由器速录}</strong>)==</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122164104410.png" alt="image-20230122164104410"></p><hr><h2 id="1-5-3吞吐量-b-s"><a href="#1-5-3吞吐量-b-s" class="headerlink" title="1.5.3吞吐量(b/s)"></a>1.5.3吞吐量(b/s)</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122164756547.png" alt="image-20230122164756547"></p><p>==<strong><code>吞吐量：</code>单位时间内</strong>，通过网络或接口的 <strong>总数据量</strong>（$&lt;=带宽$）==</p><hr><h2 id="1-5-4时延"><a href="#1-5-4时延" class="headerlink" title="1.5.4时延"></a>1.5.4时延</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/AEB34CC0FFE61504D5F570E4094AE08F.png" alt="img"></p><p>==<strong><code>时延：</code></strong>数据(1或n个分组) 从<strong>网络一端到另一端所用时间 (4部分构成)</strong>==</p><h3 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/271CD7C5ED082307D02EA1E67C751696.png" alt="img"></p><p><strong>主机/路由器 <u>发送分组</u>耗费时间</strong>。从第一个比特发送开始到最后一个比特发送完毕所用时间。</p><p>​                                                                $公式:发送时延t_发 = \frac{分组长度(b)}{发送速率(b/s)} \quad$</p><h3 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/18620FEE0A5D0CF8FCA0EF70A22A4972.png" alt="img"></p><p>电磁波在 <strong><u>数据链路上传播</u> 耗费的时间</strong></p><p>​                                                                $公式:传播时延t_传 = \frac{链路长度(m)}{链路上的传播速率(m/s)} \quad$</p><h3 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/8AFF626A14CB2D47326DA52106E86BD9-1674378695281-6.png" alt="img"></p><p><strong><u>路由器</u></strong> “<strong>检查分组的首部是否误码、提取分组首部中的目的地址、为分组查找相应的转发接口以及修改分组首部中的部分内容（例如生存时间）</strong>“ 等耗费的时间。</p><p><strong>处理时延一般无法用一个简单的公式进行计算。</strong></p><h3 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/8AFF626A14CB2D47326DA52106E86BD9.png" alt="img"></p><p>分组<strong><u>在路由器</u></strong>确定了分组的转发接口后，<strong>在输出队列中排队缓存并等待转发</strong>所耗费的时间。</p><p><strong>排队时延一般无法用一个简单的公式进行计算。</strong></p><h3 id="推广结论"><a href="#推广结论" class="headerlink" title="==推广结论=="></a>==推广结论==</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/85BA4992905C2F0F1360C75659DEF5E3.png" alt="img"></p><p>由上图☝️归纳总结，网络两端通过$n$个路由器，转发$m$个分组消耗的<strong>总时延</strong>为多少？</p><p>​                                                $总时延 = m <em> t_发 + n </em> t<em>发 + (n + 1) * t</em>传$</p><p>​                                                            ==$= (m + n) <em> t_发 + (n + 1) </em> t_传$==</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/D4BC64C6B4FD2564D2C20A61C9A44790.png" alt="img"></p><hr><h2 id="1-5-5时延带宽积-b"><a href="#1-5-5时延带宽积-b" class="headerlink" title="1.5.5时延带宽积(b)"></a>1.5.5时延带宽积(b)</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/4343A07F829D8C8F66959E6EE4419230.png" alt="img" style="zoom: 25%;" /></p><p>==<strong><code>时延带宽积:</code>传播时延(s) * 带宽(b/s)</strong>。又称为”<strong>以比特为单位的链路长度</strong>“。==</p><hr><h2 id="1-5-6往返时间RTT"><a href="#1-5-6往返时间RTT" class="headerlink" title="1.5.6往返时间RTT"></a>1.5.6往返时间RTT</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/7EF992825B00E03A72765C5F71D543FF.png" alt="img"></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122180423074.png" alt="image-20230122180423074"></p><p>==<strong><code>往返时间：</code>发送端发送数据分组</strong>开始，到发送端<strong>又接收到确认分组</strong>为止，共耗费的时间。($=传播时延 * 2$)==</p><hr><h2 id="1-5-7利用率"><a href="#1-5-7利用率" class="headerlink" title="1.5.7利用率"></a>1.5.7利用率</h2><p>​                                                ==<script type="math/tex">利用率=\begin{cases}信道利用率：\frac{有数据通过时间t}{(有+无) 数据通过时间t} \quad \\网络利用率：全网络的信道利用率的加权平均 \end{cases}</script>==</p><blockquote><p><strong>注意</strong>：信道利用率 <strong>并非越高越好！</strong></p><p>解释：根据排队论：<strong>信道利用率$U$越高，该信道引起的时延$D$也会迅速增加</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/8746B666B4014D79A01A252F6C1F7A65.png" alt="img"></p></blockquote><hr><h2 id="1-5-8丢包率"><a href="#1-5-8丢包率" class="headerlink" title="1.5.8丢包率"></a>1.5.8丢包率</h2><p>==<strong><code>丢包率：</code></strong>在一定的时间范围内，传输过程中<strong>丢失的分组数量</strong>与<strong>总分组数量</strong>的<strong>比例</strong>(反应网络拥塞情况)。==具体可分为接口丢包率、节点丢包率、链路丢包率、路径丢包率以及网络丢包率等。</p><h3 id="分组丢失的两种情况"><a href="#分组丢失的两种情况" class="headerlink" title="分组丢失的两种情况"></a>分组丢失的两种情况</h3><ol><li>产生<strong>误码</strong>，被路由器丢弃</li><li>分组到达一台队列已满的分组交换机时，被交换机丢弃；在通信量较大时可能造成<strong>网络拥塞</strong>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gcc—工具链</title>
      <link href="/2024/02/02/gcc%E2%80%94%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
      <url>/2024/02/02/gcc%E2%80%94%E5%B7%A5%E5%85%B7%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="gcc工具链"><a href="#gcc工具链" class="headerlink" title="gcc工具链"></a>gcc工具链</h1><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240202000746320.png" alt="目录结构"></p><h2 id="一、gcc四步骤"><a href="#一、gcc四步骤" class="headerlink" title="一、gcc四步骤"></a>一、gcc四步骤</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/C9577FD85681FA27D4706612B317E577.png" alt="gcc4部操作"></p><h3 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1.预处理"></a>1.预处理</h3><p>预处理器处理C语言源代码，<strong>扫描程序中所有的#开头的预编译指令，并将它们替换成相应的文本</strong>。预编译指令可以包括头文件包含、条件编译等等。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>E hello<span class="token punctuation">.</span>c <span class="token operator">-</span>o hello<span class="token punctuation">.</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><blockquote><p><strong>消耗时间和系统资源最多</strong></p></blockquote><p>编译器将预处理器处理后的代码<strong>转换成汇编代码</strong>。它会对代码进行语法和语义分析，检查程序的语法错误和类型错误，并生成汇编代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>S hello<span class="token punctuation">.</span>i <span class="token operator">-</span>o hello<span class="token punctuation">.</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-汇编"><a href="#3-汇编" class="headerlink" title="3.汇编"></a>3.汇编</h3><p>汇编器将汇编代码转换成机器码。它会将<strong>汇编代码转换为可执行代码</strong>，同时还会生成调试信息和符号表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>c hello<span class="token punctuation">.</span>s <span class="token operator">-</span>o hello<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><p>链接器将编译器生成的目标代码以及可能的库文件合并成最终的可执行文件。链接器<strong>将所有代码段和数据段链接起来，解析所有的符号引用，将地址回填。生成可执行文件</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc hello<span class="token punctuation">.</span>o <span class="token operator">-</span>o hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="二、gcc编译常用参数"><a href="#二、gcc编译常用参数" class="headerlink" title="二、gcc编译常用参数"></a>二、gcc编译常用参数</h2><h3 id="1-头文件跨目录依赖"><a href="#1-头文件跨目录依赖" class="headerlink" title="1.头文件跨目录依赖"></a>1.头文件跨目录依赖</h3><p><strong>源文件与头文件不在同一个目录下</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228150656571.png" alt="当前目录结构"  /></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>I<span class="token punctuation">.</span><span class="token operator">/</span>newdir<span class="token operator">/</span> gcctest<span class="token punctuation">.</span>c <span class="token operator">-</span>o gcctest <span class="token comment">//-I后面表示头文件所在路径(绝对/相对)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-只做预处理-编译-汇编"><a href="#2-只做预处理-编译-汇编" class="headerlink" title="2.只做预处理+编译+汇编"></a>2.只做预处理+编译+汇编</h3><p><strong>得到*.o的二进制文件</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>c gcctest <span class="token operator">-</span>o gcctest<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-编译时添加调试语句"><a href="#3-编译时添加调试语句" class="headerlink" title="3.编译时添加调试语句"></a>3.编译时添加调试语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>g gcctest<span class="token punctuation">.</span>c <span class="token operator">-</span>o gcctest2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>显然，编译出来的可执行文件大小变大了，多了可调试文件在内</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228152301962.png" alt="添加调试语句-文件变大" style="zoom:67%;" /></p><hr><h2 id="三、csapp—chapter7-链接"><a href="#三、csapp—chapter7-链接" class="headerlink" title="三、csapp—chapter7:链接"></a>三、csapp—chapter7:链接</h2><p>已知一个main.c文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token number">1</span> #include<span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span> <span class="token number">2</span> <span class="token comment">//count和value两个全局变量</span> <span class="token number">3</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token number">5</span>  <span class="token number">6</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum is:%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span> <span class="token number">9</span> <span class="token number">10</span><span class="token number">11</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">12</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">13</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">14</span>         <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">15</span> <span class="token number">16</span>         <span class="token function">func</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>gcc -c main.c</code>得到可重定位二进制文件，再根据<code>wc -c main.o</code>查看main.o文件的大小</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># wc <span class="token operator">-</span>c main<span class="token punctuation">.</span>o<span class="token number">1856</span> main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>readelf -h main.o</code>查看ELF可重定位目标文件的ELF头(ELF Header)的具体内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>o<span class="token comment">//-h：只显示ELF Header的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>oELF 头：  Magic：  <span class="token number">7f</span> <span class="token number">45</span> <span class="token number">4</span>c <span class="token number">46</span> <span class="token number">02</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>   类别<span class="token operator">:</span>                              ELF64  数据<span class="token operator">:</span>                              <span class="token number">2</span> 补码，小端序 <span class="token punctuation">(</span>little endian<span class="token punctuation">)</span>  版本<span class="token operator">:</span>                              <span class="token number">1</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span>  OS<span class="token operator">/</span>ABI<span class="token operator">:</span>                            UNIX <span class="token operator">-</span> System V  ABI 版本<span class="token operator">:</span>                          <span class="token number">0</span>  类型<span class="token operator">:</span>                              <span class="token function">REL</span> <span class="token punctuation">(</span>可重定位文件<span class="token punctuation">)</span>  系统架构<span class="token operator">:</span>                          Advanced Micro Devices X86<span class="token operator">-</span><span class="token number">64</span>  版本<span class="token operator">:</span>                              <span class="token number">0x1</span>  入口点地址：              <span class="token number">0x0</span>  程序头起点：              <span class="token number">0</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  Start of section headers<span class="token operator">:</span>          <span class="token number">1024</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  标志：             <span class="token number">0x0</span>  本头的大小：       <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  程序头大小：       <span class="token number">0</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  Number of program headers<span class="token operator">:</span>         <span class="token number">0</span>  节头大小：         <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  节头数量：         <span class="token number">13</span>  字符串表索引节头： <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-可重定位目标文件-ELF文件"><a href="#1-可重定位目标文件-ELF文件" class="headerlink" title="1.可重定位目标文件(ELF文件)"></a>1.可重定位目标文件(ELF文件)</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228190228140.png" alt="ELF文件"></p><h3 id="2-section-节-的具体内容"><a href="#2-section-节-的具体内容" class="headerlink" title="2.section(节)的具体内容"></a>2.section(节)的具体内容</h3><ol><li><strong><code>.text</code>：已编译程序的及其代码</strong></li><li><strong><code>.rodata</code>：只读数据，如：prinf函数内的格式串</strong></li><li><strong><code>.data</code>：<u>已初始化</u>的全局和静态C变量</strong></li><li><strong><code>.bss(Better Save Space)</code>：<u>未初始化</u>的全局和静态C变量</strong></li><li><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228191717559.png" style="zoom: 33%;" /></li></ol><h3 id="3-符号-amp-符号表-symtab）"><a href="#3-符号-amp-符号表-symtab）" class="headerlink" title="3.符号&amp;符号表(.symtab）"></a>3.符号&amp;符号表(.symtab）</h3><p><strong>对于每一个可重定位目标文件(ELF)m，都有一个符号表(.symtab节中)。在链接器的上下文中，有三种不同的符号：</strong></p><ol><li><strong><code>全局符号(Global Symbols)</code>：模块m定义+能被其他模块引用</strong></li><li><strong><code>外部符号(Externals Symbols)</code>：其他模块定义+能被模块m引用</strong></li><li><strong><code>局部符号(Local Symbols)</code>：只被模块m定义+其他模块不能引用。如：任何带有static修饰的全局变量或函数 都是模块私有的，其他模块不能访问，类似Java的private关键字</strong></li></ol><blockquote><p><strong>注：</strong>.symtab节的符号表不包含<strong>本地非静态局部变量</strong>，因为其在<strong>栈中被管理</strong>！</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>s main<span class="token punctuation">.</span>oSymbol table <span class="token char">'.symtab'</span> contains <span class="token number">16</span> entries<span class="token operator">:</span>   Num<span class="token operator">:</span>    Value          Size Type    Bind   Vis      Ndx Name     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  LOCAL  DEFAULT  UND      <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> FILE    LOCAL  DEFAULT  ABS main<span class="token punctuation">.</span>c     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">1</span>      <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">3</span>      <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">4</span>      <span class="token number">5</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">5</span>      <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">3</span> a<span class="token punctuation">.</span><span class="token number">2185</span>     <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">4</span> b<span class="token punctuation">.</span><span class="token number">2186</span>     <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">7</span>      <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">8</span>     <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">6</span>     <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT    <span class="token number">3</span> count    <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT  COM value    <span class="token number">13</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>    <span class="token number">33</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> func    <span class="token number">14</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  GLOBAL DEFAULT  UND printf    <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0000000000000021</span>    <span class="token number">55</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Type：FUNC-函数、OBJECT-变量数组等数据对象</p><p>Value：表示函数相对于.text section起始位置的偏移量</p><p>Bind：作用范围。局部/全局</p><p>Ndx：表示节头部表的section的数组索引。如：Ndx=1表示在.text节；Ndx=3表示在.data节</p><blockquote><p>Ndx表示中有<strong>3个伪节：</strong></p><ul><li><strong><code>ABS</code>：不该被重定位的符号</strong></li><li><strong><code>UNDEF</code>：未定义的符号</strong></li><li><strong><code>COMMON</code>：未被分配位置的初始化的数据目标</strong></li></ul><p><strong>注意：变量count和value属于不同section的原因：count初始化了，value没有初始化</strong></p><p><strong>COMMON：未初始化的全局变量；.bss节：未初始化的静态变量+初始化为0的静态/全局变量</strong></p></blockquote></blockquote><h3 id="4-符号解析"><a href="#4-符号解析" class="headerlink" title="4.符号解析"></a>4.符号解析</h3><p>对以下源文件进行编译linkerror.c进行编译汇编，生成二进制文件linkerror.o。</p><p>其中，该代码<strong>仅对函数foo进行声明</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gcc -c linkerror.c</code>，编译可以通过！<font size=3 color=red>当编译器遇到一个不是在当前模块定义的符号(变量/函数名)时，会假设该符号是在在其他模块在定义的。</font></p><font size=3 color=red>但是链接器(ld)无法解析对foo的引用时，就会终止！</font><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>Wall <span class="token operator">-</span>Og <span class="token operator">-</span>o linkerror linkerror<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>cc5EcYAf<span class="token punctuation">.</span>o：在函数‘main’中：linkerror<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x5</span><span class="token punctuation">)</span>：对‘foo’未定义的引用collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><font size=4 color=red>引出问题："全局符号"在多个可重定位目标文件中【同名定义】，如何处理？</font><p><strong>编译时，编译器向汇编器输出每个全局符号的类型：</strong></p><ul><li><strong><code>Strong symbols(强符号)</code>：函数和已初始化的全局变量</strong></li><li><strong><code>Weak symbols(弱符号)</code>：未初始化的全局变量</strong></li></ul><p><strong>汇编时，汇编器将强弱信息隐含地编码在ELF的符号表(.symtab)里</strong></p><p><strong>链接时，链接器根据以下3种情况处理多重定义的全局符号：</strong></p><ol><li><p><strong>规则1：不允许有多个同名的强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo1<span class="token punctuation">.</span>c bar1<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>ccSHeCo9<span class="token punctuation">.</span>o：在函数‘main’中：bar1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">:</span> main 的多重定义<span class="token operator">/</span>tmp<span class="token operator">/</span>ccnLYE7L<span class="token punctuation">.</span>o<span class="token operator">:</span>foo1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span>：第一次在此定义collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>规则2：一个强符号与多个弱符号同名，那么选择强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo2.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar2.c*/</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo2<span class="token punctuation">.</span>c bar2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outx <span class="token operator">=</span> <span class="token number">15212</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数f将x的值由15213改为15212。一个模块(bar2.c)里的x未初始化(弱符号)，链接器会安静地选择其他模块(foo2.c)里定义的强符号</p></li><li><p><strong>规则3：如果有多个弱符号同名，任意选择一个</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo3.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = 0x%x y = 0x%x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar3.c*/</span><span class="token keyword">double</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo3<span class="token punctuation">.</span>c bar3<span class="token punctuation">.</span>c<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>ld<span class="token operator">:</span> Warning<span class="token operator">:</span> alignment <span class="token number">4</span> of symbol `x' in <span class="token operator">/</span>tmp<span class="token operator">/</span>ccWPcPGG<span class="token punctuation">.</span>o is smaller than <span class="token number">8</span> in <span class="token operator">/</span>tmp<span class="token operator">/</span>cc3MhEaU<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="静态库-static-library"><a href="#静态库-static-library" class="headerlink" title="静态库(static library)"></a>静态库(static library)</h4><p>在共享库出现之前，<strong>公用功能(atoi/printf/scanf/strcpy/rand等)</strong>是以<strong>静态库</strong>的形式存在的，它把<strong>通用功能模块的多个目标文件打包在一起形成<code>*.a</code>的文件(如libc.a)</strong>，用到它的程序只需要在链接时指定这个库文件，<strong>链接器就会从这个库中抽取出用到的功能代码拷贝到目标程序中</strong>，而不需要每次都对这些通用功能代码重新编译。</p><p><strong>对文件<em>addvec.c</em>和<em>multvec.c</em>进行编译<code>gcc -c addvec.c multvec.c</code>，得到目标模块</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> addcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                addcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> multcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">multvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                multcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用<code>AR工具</code>将两个目标模块<em>addvec.o multvec.o</em>打包成静态库(<code>ar rcs libxxx.a xxx.o xxx.o</code>)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># ar rcs linvector<span class="token punctuation">.</span>a addvec<span class="token punctuation">.</span>o multvec<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以main2.c文件为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"vector.h"</span></span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addvec</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = [%d %d]\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中”vector.h”中包含对addvec函数的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编译和链接输入文件main2.o和libvector.a</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/1125E426BCF8DCF854B292C45FC50D8A.jpg" style="zoom:20%;" /></p><blockquote><p><strong>链接器判断main2.o引用了addvec.o定义的addvec符号，所以复制addvec.o到可执行文件。</strong></p><p><strong>因为程序未引用multvec.0定义的符号，所以链接器就不会复制这个模块到可执行文件。</strong></p><p><strong>此外，链接器还会复制libc.a中的printf.o等C系统运行时的其他模块。</strong></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span><span class="token keyword">static</span> <span class="token operator">-</span>o prog2c main2<span class="token punctuation">.</span>o <span class="token punctuation">.</span><span class="token operator">/</span>libvector<span class="token punctuation">.</span>a<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>prog2c z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-重定位"><a href="#5-重定位" class="headerlink" title="5.重定位"></a>5.重定位</h3><p>当汇编器生成一个目标模块时，它并不知道数据和代码最终将放在内存中的什么位置。也不知道本模块引用的外部定义函数或全局变量的最终位置。</p><p><strong><font size=3 color=red>因此，汇编器遇到对最终位置未知的目标引用，就会生成一个【重定位条目】，告诉链接器再将目标文件合并为可执行文件时如何修改这个引用。</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*重定位条目-数据结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> offset<span class="token punctuation">;</span><span class="token comment">//被修改的引用的节偏移量</span><span class="token keyword">long</span> type<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token comment">//告知链接器如何修改新的引用</span>    <span class="token comment">//主要两种：1.R_X86_64_PC32(PC相对地址)2.R_X86_64_32(绝对地址)</span>symbol<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//表示被修改的引用是哪个符号</span><span class="token keyword">long</span> addend<span class="token punctuation">;</span><span class="token comment">//有符号数，一些类型的重定位要使用它对被修改引用的值做偏移调整(指令长度)</span><span class="token punctuation">&#125;</span> ELF_Rela<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>代码的重定位条目存放在<code>.rel.text</code>中</strong></p><p><strong>已初始化数据的重定位条目存放在<code>.rel.data</code>中</strong></p></blockquote><h4 id="重定位算法"><a href="#重定位算法" class="headerlink" title="重定位算法"></a>重定位算法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">foreach section s <span class="token punctuation">&#123;</span>foreach relocation entry r <span class="token punctuation">&#123;</span>refptr <span class="token operator">=</span> s <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*1.重定位PC相对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_PC32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>refaddr <span class="token operator">=</span> <span class="token function">ADDR</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*refaddr:引用的运行时地址*/</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend <span class="token operator">-</span> refaddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*2.重定位绝对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="①重定位PC相对引用"><a href="#①重定位PC相对引用" class="headerlink" title="①重定位PC相对引用"></a>①重定位PC相对引用</h4><p><strong>例：对源文件<em>main.c</em>和<em>sum.c</em>进行反汇编：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再用<code>objdump -dx main.o</code>对main,o进行反编译后结果：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># objdump <span class="token operator">-</span>dx main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231229213448474.png" style="zoom: 50%;" /></p><p><strong>函数main调用sum函数，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xf</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> sumr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_PC32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><u>这些字段告诉链接器修改开始于0xf处的32位PC相对引用，这样在运行时它会指向sum例程</u>。假设链接器已确定：</strong></p><ul><li><strong><code>ADDR(s) = ADDR(.text)</code> = 0x400d0</strong></li><li><strong><code>ADDR(r.symbol) = ADDR(sum)</code> = 0x400e8</strong></li></ul><p><strong>使用<code>重定位算法</code>知：</strong></p><ol><li><p><strong>链接器首先算出引用的<u>运行时地址</u>：</strong></p><p><strong>ref_addr = ADDR(s) + r.offset = 0x4004d0 + 0xf = 0x4004df</strong> </p></li><li><p><strong>然后更新该引用，使得它再运行时指向sum程序(实际就是求PC的offset)</strong></p><p><strong>ref_ptr = ADDR(sum) - ref_addr + r.addend = 0x4004e8 - 0x4004df +(-4) = 0x5</strong></p></li></ol><p>得到的可执行文件中，call指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>de<span class="token operator">:</span>e8 <span class="token number">05</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       callq  <span class="token number">4004e8</span> <span class="token operator">&lt;</span>sum<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②重定位绝对引用"><a href="#②重定位绝对引用" class="headerlink" title="②重定位绝对引用"></a>②重定位绝对引用</h4><p><strong>mov指令将array地址(32位立即数)复制到寄存器%edi中，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xa</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> arrayr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些字段告诉链接器修改开始于0xa处的32位绝对引用，这样在运行时它会指向array的第一个字节。假设链接器已确定：</p><ul><li><strong><code>ADDR(r.symbol) = ADDR(array)</code> = 0x601018</strong></li></ul><p>链接器修改第13行的引用：</p><p><strong>*ref_ptr = (unsigned) ((ADDR(r.symbol) + r.addend)) = (unsigned) (0x601018 + 0) = 0x601018</strong></p><p>得到的可执行文件中，机器指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>d9<span class="token operator">:</span>bf <span class="token number">18</span> <span class="token number">10</span> <span class="token number">60</span> <span class="token number">00</span>       mov $<span class="token number">0x601018</span><span class="token punctuation">,</span> <span class="token operator">%</span>edi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/D0D016AAD0F392AC3C3FFCEFEFAA42CC.jpg" alt=""></p><h3 id="6-可执行目标文件-amp-加载过程"><a href="#6-可执行目标文件-amp-加载过程" class="headerlink" title="6.可执行目标文件&amp;加载过程"></a>6.可执行目标文件&amp;加载过程</h3>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
