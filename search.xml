<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>chapter7—链接</title>
      <link href="/2024/02/04/chapter7%E2%80%94%E9%93%BE%E6%8E%A5/"/>
      <url>/2024/02/04/chapter7%E2%80%94%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="chapter7—链接"><a href="#chapter7—链接" class="headerlink" title="chapter7—链接"></a>chapter7—链接</h1><p>已知一个main.c文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token number">1</span> #include<span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span> <span class="token number">2</span> <span class="token comment">//count和value两个全局变量</span> <span class="token number">3</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token number">5</span>  <span class="token number">6</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum is:%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span> <span class="token number">9</span> <span class="token number">10</span><span class="token number">11</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">12</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">13</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">14</span>         <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">15</span> <span class="token number">16</span>         <span class="token function">func</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>gcc -c main.c</code>得到可重定位二进制文件，再根据<code>wc -c main.o</code>查看main.o文件的大小</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># wc <span class="token operator">-</span>c main<span class="token punctuation">.</span>o<span class="token number">1856</span> main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>readelf -h main.o</code>查看ELF可重定位目标文件的ELF头(ELF Header)的具体内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>o<span class="token comment">//-h：只显示ELF Header的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>oELF 头：  Magic：  <span class="token number">7f</span> <span class="token number">45</span> <span class="token number">4</span>c <span class="token number">46</span> <span class="token number">02</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>   类别<span class="token operator">:</span>                              ELF64  数据<span class="token operator">:</span>                              <span class="token number">2</span> 补码，小端序 <span class="token punctuation">(</span>little endian<span class="token punctuation">)</span>  版本<span class="token operator">:</span>                              <span class="token number">1</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span>  OS<span class="token operator">/</span>ABI<span class="token operator">:</span>                            UNIX <span class="token operator">-</span> System V  ABI 版本<span class="token operator">:</span>                          <span class="token number">0</span>  类型<span class="token operator">:</span>                              <span class="token function">REL</span> <span class="token punctuation">(</span>可重定位文件<span class="token punctuation">)</span>  系统架构<span class="token operator">:</span>                          Advanced Micro Devices X86<span class="token operator">-</span><span class="token number">64</span>  版本<span class="token operator">:</span>                              <span class="token number">0x1</span>  入口点地址：              <span class="token number">0x0</span>  程序头起点：              <span class="token number">0</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  Start of section headers<span class="token operator">:</span>          <span class="token number">1024</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  标志：             <span class="token number">0x0</span>  本头的大小：       <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  程序头大小：       <span class="token number">0</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  Number of program headers<span class="token operator">:</span>         <span class="token number">0</span>  节头大小：         <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  节头数量：         <span class="token number">13</span>  字符串表索引节头： <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可重定位目标文件-ELF文件"><a href="#可重定位目标文件-ELF文件" class="headerlink" title="可重定位目标文件(ELF文件)"></a>可重定位目标文件(ELF文件)</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228190228140.png" alt="ELF文件"></p><h2 id="section-节-的具体内容"><a href="#section-节-的具体内容" class="headerlink" title="section(节)的具体内容"></a>section(节)的具体内容</h2><ol><li><strong><code>.text</code>：已编译程序的及其代码</strong></li><li><strong><code>.rodata</code>：只读数据，如：prinf函数内的格式串</strong></li><li><strong><code>.data</code>：<u>已初始化</u>的全局和静态C变量</strong></li><li><strong><code>.bss(Better Save Space)</code>：<u>未初始化</u>的全局和静态C变量</strong></li><li><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228191717559.png" style="zoom: 33%;" /></li></ol><h2 id="符号-符号表-symtab）"><a href="#符号-符号表-symtab）" class="headerlink" title="符号&amp;符号表(.symtab）"></a>符号&amp;符号表(.symtab）</h2><p><strong>对于每一个可重定位目标文件(ELF)m，都有一个符号表(.symtab节中)。在链接器的上下文中，有三种不同的符号：</strong></p><ol><li><strong><code>全局符号(Global Symbols)</code>：模块m定义+能被其他模块引用</strong></li><li><strong><code>外部符号(Externals Symbols)</code>：其他模块定义+能被模块m引用</strong></li><li><strong><code>局部符号(Local Symbols)</code>：只被模块m定义+其他模块不能引用。如：任何带有static修饰的全局变量或函数 都是模块私有的，其他模块不能访问，类似Java的private关键字</strong></li></ol><blockquote><p><strong>注：</strong>.symtab节的符号表不包含<strong>本地非静态局部变量</strong>，因为其在<strong>栈中被管理</strong>！</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>s main<span class="token punctuation">.</span>oSymbol table <span class="token char">'.symtab'</span> contains <span class="token number">16</span> entries<span class="token operator">:</span>   Num<span class="token operator">:</span>    Value          Size Type    Bind   Vis      Ndx Name     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  LOCAL  DEFAULT  UND      <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> FILE    LOCAL  DEFAULT  ABS main<span class="token punctuation">.</span>c     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">1</span>      <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">3</span>      <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">4</span>      <span class="token number">5</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">5</span>      <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">3</span> a<span class="token punctuation">.</span><span class="token number">2185</span>     <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">4</span> b<span class="token punctuation">.</span><span class="token number">2186</span>     <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">7</span>      <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">8</span>     <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">6</span>     <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT    <span class="token number">3</span> count    <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT  COM value    <span class="token number">13</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>    <span class="token number">33</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> func    <span class="token number">14</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  GLOBAL DEFAULT  UND printf    <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0000000000000021</span>    <span class="token number">55</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Type：FUNC-函数、OBJECT-变量数组等数据对象</p><p>Value：表示函数相对于.text section起始位置的偏移量</p><p>Bind：作用范围。局部&#x2F;全局</p><p>Ndx：表示节头部表的section的数组索引。如：Ndx&#x3D;1表示在.text节；Ndx&#x3D;3表示在.data节</p><blockquote><p>Ndx表示中有<strong>3个伪节：</strong></p></blockquote><blockquote><ul><li><strong><code>ABS</code>：不该被重定位的符号</strong></li><li><strong><code>UNDEF</code>：未定义的符号</strong></li><li><strong><code>COMMON</code>：未被分配位置的初始化的数据目标</strong></li></ul></blockquote><blockquote><p><strong>注意：变量count和value属于不同section的原因：count初始化了，value没有初始化</strong></p></blockquote><blockquote><p><strong>COMMON：未初始化的全局变量；.bss节：未初始化的静态变量+初始化为0的静态&#x2F;全局变量</strong></p></blockquote></blockquote><h3 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h3><p>对以下源文件进行编译linkerror.c进行编译汇编，生成二进制文件linkerror.o。</p><p>其中，该代码<strong>仅对函数foo进行声明</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gcc -c linkerror.c </code>，编译可以通过！<font size=3 color=red>当编译器遇到一个不是在当前模块定义的符号(变量&#x2F;函数名)时，会假设该符号是在在其他模块在定义的。</font></p><p><font size=3 color=red>但是链接器(ld)无法解析对foo的引用时，就会终止！</font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>Wall <span class="token operator">-</span>Og <span class="token operator">-</span>o linkerror linkerror<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>cc5EcYAf<span class="token punctuation">.</span>o：在函数‘main’中：linkerror<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x5</span><span class="token punctuation">)</span>：对‘foo’未定义的引用collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font size=4 color=red>引出问题：”全局符号”在多个可重定位目标文件中【同名定义】，如何处理？</font></p><p><strong>编译时，编译器向汇编器输出每个全局符号的类型：</strong></p><ul><li><strong><code>Strong symbols(强符号)</code>：函数和已初始化的全局变量</strong></li><li><strong><code>Weak symbols(弱符号)</code>：未初始化的全局变量</strong></li></ul><p><strong>汇编时，汇编器将强弱信息隐含地编码在ELF的符号表(.symtab)里</strong></p><p><strong>链接时，链接器根据以下3种情况处理多重定义的全局符号：</strong></p><ol><li><p><strong>规则1：不允许有多个同名的强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo1<span class="token punctuation">.</span>c bar1<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>ccSHeCo9<span class="token punctuation">.</span>o：在函数‘main’中：bar1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">:</span> main 的多重定义<span class="token operator">/</span>tmp<span class="token operator">/</span>ccnLYE7L<span class="token punctuation">.</span>o<span class="token operator">:</span>foo1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span>：第一次在此定义collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>规则2：一个强符号与多个弱符号同名，那么选择强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo2.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar2.c*/</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo2<span class="token punctuation">.</span>c bar2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outx <span class="token operator">=</span> <span class="token number">15212</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数f将x的值由15213改为15212。一个模块(bar2.c)里的x未初始化(弱符号)，链接器会安静地选择其他模块(foo2.c)里定义的强符号</p></li><li><p><strong>规则3：如果有多个弱符号同名，任意选择一个</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo3.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = 0x%x y = 0x%x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar3.c*/</span><span class="token keyword">double</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo3<span class="token punctuation">.</span>c bar3<span class="token punctuation">.</span>c<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>ld<span class="token operator">:</span> Warning<span class="token operator">:</span> alignment <span class="token number">4</span> of symbol `x' in <span class="token operator">/</span>tmp<span class="token operator">/</span>ccWPcPGG<span class="token punctuation">.</span>o is smaller than <span class="token number">8</span> in <span class="token operator">/</span>tmp<span class="token operator">/</span>cc3MhEaU<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="静态库-static-library"><a href="#静态库-static-library" class="headerlink" title="静态库(static library)"></a>静态库(static library)</h4><p>在共享库出现之前，<strong>公用功能(atoi&#x2F;printf&#x2F;scanf&#x2F;strcpy&#x2F;rand等)<strong>是以</strong>静态库</strong>的形式存在的，它把<strong>通用功能模块的多个目标文件打包在一起形成<code>*.a</code>的文件(如libc.a)<strong>，用到它的程序只需要在链接时指定这个库文件，</strong>链接器就会从这个库中抽取出用到的功能代码拷贝到目标程序中</strong>，而不需要每次都对这些通用功能代码重新编译。</p><p><strong>对文件<em>addvec.c</em>和<em>multvec.c</em>进行编译<code>gcc -c addvec.c multvec.c</code>，得到目标模块</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> addcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                addcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> multcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">multvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                multcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用<code>AR工具</code>将两个目标模块<em>addvec.o multvec.o</em>打包成静态库(<code>ar rcs libxxx.a xxx.o xxx.o</code>)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># ar rcs linvector<span class="token punctuation">.</span>a addvec<span class="token punctuation">.</span>o multvec<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以main2.c文件为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"vector.h"</span></span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addvec</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = [%d %d]\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中”vector.h”中包含对addvec函数的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编译和链接输入文件main2.o和libvector.a</strong></p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/1125E426BCF8DCF854B292C45FC50D8A.jpg" style="zoom:20%;" /><blockquote><p><strong>链接器判断main2.o引用了addvec.o定义的addvec符号，所以复制addvec.o到可执行文件。</strong></p><p><strong>因为程序未引用multvec.0定义的符号，所以链接器就不会复制这个模块到可执行文件。</strong></p><p><strong>此外，链接器还会复制libc.a中的printf.o等C系统运行时的其他模块。</strong></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span><span class="token keyword">static</span> <span class="token operator">-</span>o prog2c main2<span class="token punctuation">.</span>o <span class="token punctuation">.</span><span class="token operator">/</span>libvector<span class="token punctuation">.</span>a<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>prog2c z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p>当汇编器生成一个目标模块时，它并不知道数据和代码最终将放在内存中的什么位置。也不知道本模块引用的外部定义函数或全局变量的最终位置。</p><p><strong><font size=3 color=red>因此，汇编器遇到对最终位置未知的目标引用，就会生成一个【重定位条目】，告诉链接器再将目标文件合并为可执行文件时如何修改这个引用。</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*重定位条目-数据结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> offset<span class="token punctuation">;</span><span class="token comment">//被修改的引用的节偏移量</span><span class="token keyword">long</span> type<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token comment">//告知链接器如何修改新的引用</span>    <span class="token comment">//主要两种：1.R_X86_64_PC32(PC相对地址)2.R_X86_64_32(绝对地址)</span>symbol<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//表示被修改的引用是哪个符号</span><span class="token keyword">long</span> addend<span class="token punctuation">;</span><span class="token comment">//有符号数，一些类型的重定位要使用它对被修改引用的值做偏移调整(指令长度)</span><span class="token punctuation">&#125;</span> ELF_Rela<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>代码的重定位条目存放在<code>.rel.text</code>中</strong></p><p><strong>已初始化数据的重定位条目存放在<code>.rel.data</code>中</strong></p></blockquote><h4 id="重定位算法"><a href="#重定位算法" class="headerlink" title="重定位算法"></a>重定位算法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">foreach section s <span class="token punctuation">&#123;</span>foreach relocation entry r <span class="token punctuation">&#123;</span>refptr <span class="token operator">=</span> s <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*1.重定位PC相对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_PC32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>refaddr <span class="token operator">=</span> <span class="token function">ADDR</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*refaddr:引用的运行时地址*/</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend <span class="token operator">-</span> refaddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*2.重定位绝对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="①重定位PC相对引用"><a href="#①重定位PC相对引用" class="headerlink" title="①重定位PC相对引用"></a>①重定位PC相对引用</h5><p><strong>例：对源文件<em>main.c</em>和<em>sum.c</em>进行反汇编：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再用<code>objdump -dx main.o</code>对main,o进行反编译后结果：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># objdump <span class="token operator">-</span>dx main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231229213448474.png" style="zoom: 50%;" /><p><strong>函数main调用sum函数，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xf</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> sumr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_PC32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><u>这些字段告诉链接器修改开始于0xf处的32位PC相对引用，这样在运行时它会指向sum例程</u>。假设链接器已确定：</strong></p><ul><li><strong><code>ADDR(s) = ADDR(.text)</code> &#x3D; 0x400d0</strong></li><li><strong><code>ADDR(r.symbol) = ADDR(sum)</code> &#x3D; 0x400e8</strong></li></ul><p><strong>使用<code>重定位算法</code>知：</strong></p><ol><li><p><strong>链接器首先算出引用的<u>运行时地址</u>：</strong></p><p><strong>ref_addr &#x3D; ADDR(s) + r.offset &#x3D; 0x4004d0 + 0xf &#x3D; 0x4004df</strong> </p></li><li><p><strong>然后更新该引用，使得它再运行时指向sum程序(实际就是求PC的offset)</strong></p><p><strong>ref_ptr &#x3D; ADDR(sum) - ref_addr + r.addend &#x3D; 0x4004e8 - 0x4004df +(-4) &#x3D; 0x5</strong></p></li></ol><p>得到的可执行文件中，call指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>de<span class="token operator">:</span>e8 <span class="token number">05</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       callq  <span class="token number">4004e8</span> <span class="token operator">&lt;</span>sum<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="②重定位绝对引用"><a href="#②重定位绝对引用" class="headerlink" title="②重定位绝对引用"></a>②重定位绝对引用</h5><p><strong>mov指令将array地址(32位立即数)复制到寄存器%edi中，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xa</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> arrayr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些字段告诉链接器修改开始于0xa处的32位绝对引用，这样在运行时它会指向array的第一个字节。假设链接器已确定：</p><ul><li><strong><code>ADDR(r.symbol) = ADDR(array)</code> &#x3D; 0x601018</strong></li></ul><p>链接器修改第13行的引用：</p><p>*<strong>ref_ptr &#x3D; (unsigned) ((ADDR(r.symbol) + r.addend)) &#x3D; (unsigned) (0x601018 + 0) &#x3D; 0x601018</strong></p><p>得到的可执行文件中，机器指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>d9<span class="token operator">:</span>bf <span class="token number">18</span> <span class="token number">10</span> <span class="token number">60</span> <span class="token number">00</span>       mov $<span class="token number">0x601018</span><span class="token punctuation">,</span> <span class="token operator">%</span>edi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/D0D016AAD0F392AC3C3FFCEFEFAA42CC.jpg"></p><h3 id="可执行目标文件-加载过程"><a href="#可执行目标文件-加载过程" class="headerlink" title="可执行目标文件&amp;加载过程"></a>可执行目标文件&amp;加载过程</h3>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态库与共享库</title>
      <link href="/2024/02/04/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%BA%93/"/>
      <url>/2024/02/04/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="静态库与共享库"><a href="#静态库与共享库" class="headerlink" title="静态库与共享库"></a>静态库与共享库</h1><blockquote><p>所谓**”程序库”<strong>，就是</strong>包含了数据和执行码的文件。其不能单独执行，可以作为其他程序的一部分完成某些功能**。</p><p>库的存在，可以使程序模块化，加快程序的再编译，可以实现代码重用，可以使得程序便于升级。</p><p><strong>程序库可分为<code>静态库(static library)</code>和<code>共享库(shared object)</code>。两者本质区别：该库是否被编译进目标（程序）内部。</strong></p></blockquote><hr><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>这类库在<strong>编译的时候</strong>会直接整合到目标程序中，所以利用静态函数库编译成的文件会比较大。<strong>应用于对空间要求低，时间要求高的程序中</strong>。</p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204092840853.png" alt="静态库文件50MB,100个程序则占用50GB空间" style="zoom: 40%;" /><ul><li>优点：编译成功的可执行文件可以独立运行，而不再需要向外部要求读取函数库的内容</li><li>缺点：相同的库文件数据可能在内存中被加载多份，消耗系统资源，浪费内存；函数库更新，需要重新编译</li></ul><h3 id="应用实例—生成静态库"><a href="#应用实例—生成静态库" class="headerlink" title="应用实例—生成静态库"></a>应用实例—生成静态库</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*add.c*/</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*sub.c*/</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*div.c*/</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>step1：对<code>add.c</code>和<code>sub.c</code>和<code>div.c</code>三个文件进行编译，得到3个<strong>可重定位目标文件</strong></p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204100758657.png" alt="3个可重定位目标文件" style="zoom: 67%;" /><p>step2：使用<code>ar工具</code>将3个可重定位目标文件生成为1个<strong>静态库</strong><code>libmymath.a</code>。</p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204101129292.png" alt="ar rcs libxxx.a xxx.o ... xx.o" style="zoom:67%;" /><p>step3：**在<code>math.c</code>程序编译过程中使用静态库<code>libmymath.a</code>**。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204110237451.png" alt="gcc math.c libmymath.a -o math" style="zoom:67%;" /><h3 id="隐式声明"><a href="#隐式声明" class="headerlink" title="隐式声明"></a>隐式声明</h3><p>在C语言中，函数在调用前不一定非要声明。如果没有声明，那么<strong>编译器会自动按照一种隐式声明的规则，为调用函数的C代码产生汇编代码</strong>。</p><p>单纯的编译上述<code>math.c</code>源代码，并没有任何报错，只是在链接阶段若找不到名为add&#x2F;sub&#x2F;div的函数体则报错。之所以编译不会报错，是因为C语言规定，<strong>对于没有声明的函数，自动使用隐式声明</strong>。</p><p>编译<code>math.c</code>源代码，加上警告信息<code>gcc math.c libmymath.a -o math -Wall</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 staticLib<span class="token punctuation">]</span><span class="token comment"># gcc math.c libmymath.a -o math -Wall</span>math.c: 在函数‘main’中:math.c:6:2: 警告：隐式声明函数‘add’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  printf<span class="token punctuation">(</span><span class="token string">"%d + %d = %d<span class="token entity" title="\n">\n</span>"</span>, a, b, add<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span><span class="token punctuation">;</span>  ^math.c:7:2: 警告：隐式声明函数‘sub’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  printf<span class="token punctuation">(</span><span class="token string">"%d - %d = %d<span class="token entity" title="\n">\n</span>"</span>, a, b, sub<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span><span class="token punctuation">;</span>  ^math.c:8:2: 警告：隐式声明函数‘div’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>  printf<span class="token punctuation">(</span><span class="token string">"%d / %d = %d<span class="token entity" title="\n">\n</span>"</span>, a, b, div<span class="token punctuation">(</span>a, b<span class="token punctuation">))</span><span class="token punctuation">;</span>  ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译通过！并没有任何报错，只是在链接阶段若找不到名为add&#x2F;sub&#x2F;div的函数体则报错。</p><p>之所以编译不会报错，是因为C语言规定，<strong>对于没有声明&#x2F;定义的函数，自动使用隐式声明</strong>。相当于变成了如下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//编译器的隐式声明:int function_name(int, ... parameter_type);</span><span class="token comment">//默认返回值为int类型，对函数参数不关心，若函数实际返回值为其他类型，则链接时报错</span><span class="token comment">//隐式声明的函数原型与库函数完全相同，则链接运行没有问题(如本例)</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示声明"><a href="#显示声明" class="headerlink" title="显示声明"></a>显示声明</h3><p>隐式声明给程序员带来了各种困惑，给程序的稳定性带来了非常坏的影响。一般使用显示声明，将函数定义&#x2F;声明放入头文件中，在程序中引入头文件：</p><p>头文件<code>mymath.h</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * 加入的三行：头文件守卫 *多个c程序都包含该头文件引用，编译时带来大量声明冲突 * 加入头文件首位：避免多次包含 * */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MYMATH_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MYMATH_H_</span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源程序<code>math.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mymath.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204171348932.png" alt="编译运行正常" style="zoom: 67%;" /><hr><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p>动态函数库在<strong>编译的时候，在程序里只有一个“指向”的位置而已</strong>，也就是说当可执行文件需要使用到函数库的机制时，程序才会去读取函数库来使用。<strong>应用于对时间要求低，空间要求高的程序中。</strong></p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204093255920.png" alt="100个程序运行时共同使用1个500MB的共享库" style="zoom:35%;" /><ul><li>优点：可实现不同进程间的资源共享；动态库升级简单，只需要替换库文件，无需重新编译应用程序</li><li>缺点：加载速度比静态库慢；发布程序需要提供依赖的动态库</li></ul><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>step1：对<code>add.c</code>和<code>sub.c</code>和<code>div.c</code>三个文件进行编译，得到3个<strong>可重定位目标文件(.o)</strong></p><blockquote><p><strong>注意：动态库所需的可重定位目标文件与静态库所需的可重定位目标文件不同！</strong></p><ul><li>静态库所用的<code>.o</code>文件中的调用函数地址：<strong>编译时生成(相对于main的相对寻址)</strong></li><li>动态库所用的<code>.o</code>文件中的调用函数地址：<strong>运行时生成！</strong></li></ul><p><strong>因此编译时需要加上参数：<code>-fPIC</code>!!!!</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dymamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -c add.c -o add.o -fPIC</span><span class="token punctuation">[</span>root@lhyEdu01 dymamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -c sub.c -o sub.o -fPIC</span><span class="token punctuation">[</span>root@lhyEdu01 dymamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -c div.c -o div.o -fPIC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204223416243.png" alt="查看结果：编译成功！" style="zoom:80%;" /><p>step2：<strong>使用<code>gcc -shared -o libxxx.so xxx.o xxx.o</code>制作动态库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dynamicLib<span class="token punctuation">]</span><span class="token comment"># gcc -shared -o libmymath.so add.o sub.o div.o</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204224939797.png" alt="动态库libmymath.so制作成功" style="zoom:80%;" /><p>step3：编译可执行程序时，指定所用的动态库<code>gcc myth.c -o a.out -lmymath -L ./ 头文件 </code>。</p><blockquote><p><strong>-l：指定库名（libxxx.so的xxx是库名）</strong></p><p><strong>-L：指定库路径</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dynamicLib<span class="token punctuation">]</span><span class="token comment"># gcc math.c -o math.out -lmymath -L./ mymath.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204225104876.png" alt="编译成功:math.out"></p><p>step4：<code>math.out</code>运行…<strong>失败！</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204225710207.png" alt="运行失败！！！"></p><blockquote><p><strong>下文分析运行失败原因</strong></p></blockquote><h3 id="原因：链接器-动态链接器"><a href="#原因：链接器-动态链接器" class="headerlink" title="原因：链接器&amp;动态链接器"></a>原因：链接器&amp;动态链接器</h3><blockquote><p><strong>链接器&amp;动态链接器的关系：张三和张三丰、雷锋和雷峰塔，没有关系</strong></p><ul><li><strong>链接器</strong>：工作于链接阶段，工作时需要 -l 和 -L</li><li><strong>动态链接器</strong>：工作于程序运行阶段，工作时需要提供动态库所在目录位置。<strong>通过改变环境变量：<code>export LD_LIBRARY_PATH=动态库所在路径</code>；或者动态库使用绝对路径</strong></li></ul></blockquote><p><strong>方法1：通过改变环境变量</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 dynamicLib<span class="token punctuation">]</span><span class="token comment"># export LD_LIBRARY_PATH=/unix/dynamicLib</span><span class="token comment">#注意：环境变量只是暂时生效，终端重启后失效！</span><span class="token comment">#永久改变需要更爱配置文件:vim ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204231119298.png" alt="运行成功" style="zoom: 67%;" /><p><strong>方法2：动态库使用绝对路径</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240204232632451.png" alt="运行成功"></p><hr><h2 id="扩展讲解：数据段合并"><a href="#扩展讲解：数据段合并" class="headerlink" title="扩展讲解：数据段合并"></a>扩展讲解：数据段合并</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240205092822703.png" alt="进程的虚拟内存空间"></p><p><a href="https://aqua555552st.github.io/2024/02/04/chapter7%E2%80%94%E9%93%BE%E6%8E%A5/">细节请参考：chapter7—链接 | aqua555552st’s script</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CentOS-7配置apue.h库文件</title>
      <link href="/2024/02/03/%E5%9F%BA%E4%BA%8ECentOS-7%E9%85%8D%E7%BD%AEapue-h%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>/2024/02/03/%E5%9F%BA%E4%BA%8ECentOS-7%E9%85%8D%E7%BD%AEapue-h%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="基于CentOS-7配置apue-h库文件"><a href="#基于CentOS-7配置apue-h库文件" class="headerlink" title="基于CentOS-7配置apue.h库文件"></a>基于CentOS-7配置apue.h库文件</h1><blockquote><p>在学习<strong>《UNIX环境高级编程》</strong>一书中，提供的代码用例需要先配置好书中提供的apue.h库文件后，才能正常运行。<strong>本文详细说明apue.h库文件的配置</strong>。</p></blockquote><h2 id="建立apue-h库文件的存放路径"><a href="#建立apue-h库文件的存放路径" class="headerlink" title="建立apue.h库文件的存放路径"></a>建立apue.h库文件的存放路径</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 /<span class="token punctuation">]</span><span class="token comment"># mkdir apue</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 /<span class="token punctuation">]</span><span class="token comment"># cd apue/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载apue-h库文件"><a href="#下载apue-h库文件" class="headerlink" title="下载apue.h库文件"></a>下载apue.h库文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># http://www.apuebook.com/src.3e.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># tar -zxvf src.3e.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240203185303773.png" alt="ls指令查看目录中的文件：解压成功"></p><h2 id="cd-到apue-3e目录下"><a href="#cd-到apue-3e目录下" class="headerlink" title="cd 到apue.3e目录下"></a>cd 到apue.3e目录下</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue<span class="token punctuation">]</span><span class="token comment"># cd apue.3e/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="CentOS-7下缺少相关的库，下载Fedora的资源进行安装："><a href="#CentOS-7下缺少相关的库，下载Fedora的资源进行安装：" class="headerlink" title="CentOS-7下缺少相关的库，下载Fedora的资源进行安装："></a>CentOS-7下缺少相关的库，下载Fedora的资源进行安装：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="然后执行："><a href="#然后执行：" class="headerlink" title="然后执行："></a>然后执行：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># yum install libbsd libbsd-devel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="执行make语句"><a href="#执行make语句" class="headerlink" title="执行make语句"></a>执行make语句</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="把make生成的apue-h与静态链接库libapue-a放到系统指定寻找的地方"><a href="#把make生成的apue-h与静态链接库libapue-a放到系统指定寻找的地方" class="headerlink" title="把make生成的apue.h与静态链接库libapue.a放到系统指定寻找的地方"></a>把make生成的apue.h与静态链接库libapue.a放到系统指定寻找的地方</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># cp ./include/apue.h /usr/include/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># cp ./lib/libapue.a /usr/local/lib/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>现在就可以使用《Unix环境高级编程》中的apue.h库了！！！下文提供测试用例</strong></p><hr><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p><strong>在根目录下创建<code>unix</code>目录，将apue学习过程中的测试用例和相关代码存放至此</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 apue.3e<span class="token punctuation">]</span><span class="token comment"># cd /</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 /<span class="token punctuation">]</span><span class="token comment"># mkdir unix</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编写测试程序:<code>vim test.c</code>:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># vim test.c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>test.c程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"apue.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/tmp"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"chdir failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"chdir to /tmp successed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># gcc test.c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240203190837564.png" alt="ls指令查看编译后结果"></p><p><strong>运行：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lhyEdu01 unix<span class="token punctuation">]</span><span class="token comment"># ./a.out</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240203191426759.png" alt="执行成功！"></p><hr><p><strong>运行无异常，配置成功！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5计算机网络的性能指标</title>
      <link href="/2024/02/03/1-5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
      <url>/2024/02/03/1-5%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="1-5计算机网络的性能指标"><a href="#1-5计算机网络的性能指标" class="headerlink" title="1.5计算机网络的性能指标"></a>1.5计算机网络的性能指标</h1><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/89BB0CDA479AFB37D8D39F2352F32642.png" alt="img"></p><p>计算机网络的性能指标被用来**从不同方面&#x3D;&#x3D;度量计算机网络的性能&#x3D;&#x3D;**。</p><h2 id="1-5-1速率-b-s"><a href="#1-5-1速率-b-s" class="headerlink" title="1.5.1速率(b&#x2F;s)"></a>1.5.1速率(b&#x2F;s)</h2><blockquote><p>前置知识：</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122162733246.png" alt="image-20230122162733246"></p></blockquote><p>&#x3D;&#x3D;<strong><code>速率:</code>数据的传送速率</strong>(每秒传送多少比特)，又称 **”数据率”<strong>，</strong>“比特率”**。&#x3D;&#x3D;</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122163209554.png" alt="image-20230122163209554"></p><hr><h2 id="1-5-2带宽-b-s"><a href="#1-5-2带宽-b-s" class="headerlink" title="1.5.2带宽(b&#x2F;s)"></a>1.5.2带宽(b&#x2F;s)</h2><p><code>带宽(Hz)在模拟信号系统中的意义：</code>某个信号所包含的各种不同频率成分所占据的频率范围。</p><p>&#x3D;&#x3D;<strong><code>带宽(b/s)在计算机网络中的意义：</code><strong>网络的通信线路 <strong>传送数据的能力</strong>。(</strong>&#x3D;MAX IN{主机接口速率，线路速率，交换机&#x2F;路由器速录}</strong>)&#x3D;&#x3D;</p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122164104410.png" alt="image-20230122164104410"></p><hr><h2 id="1-5-3吞吐量-b-s"><a href="#1-5-3吞吐量-b-s" class="headerlink" title="1.5.3吞吐量(b&#x2F;s)"></a>1.5.3吞吐量(b&#x2F;s)</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122164756547.png" alt="image-20230122164756547"></p><p>&#x3D;&#x3D;<strong><code>吞吐量：</code>单位时间内</strong>，通过网络或接口的 <strong>总数据量</strong>（$&lt;&#x3D;带宽$）&#x3D;&#x3D;</p><hr><h2 id="1-5-4时延"><a href="#1-5-4时延" class="headerlink" title="1.5.4时延"></a>1.5.4时延</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/AEB34CC0FFE61504D5F570E4094AE08F.png" alt="img"></p><p>&#x3D;&#x3D;<strong><code>时延：</code><strong>数据(1或n个分组) 从</strong>网络一端到另一端所用时间 (4部分构成)</strong>&#x3D;&#x3D;</p><h3 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/271CD7C5ED082307D02EA1E67C751696.png" alt="img"></p><p><strong>主机&#x2F;路由器 <u>发送分组</u>耗费时间</strong>。从第一个比特发送开始到最后一个比特发送完毕所用时间。</p><p>​$公式:发送时延t_发 &#x3D; \frac{分组长度(b)}{发送速率(b&#x2F;s)} \quad$</p><h3 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/18620FEE0A5D0CF8FCA0EF70A22A4972.png" alt="img"></p><p>电磁波在 <strong><u>数据链路上传播</u> 耗费的时间</strong></p><p>​$公式:传播时延t_传 &#x3D; \frac{链路长度(m)}{链路上的传播速率(m&#x2F;s)} \quad$</p><h3 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/8AFF626A14CB2D47326DA52106E86BD9-1674378695281-6.png" alt="img"></p><p><strong><u>路由器</u></strong> “<strong>检查分组的首部是否误码、提取分组首部中的目的地址、为分组查找相应的转发接口以及修改分组首部中的部分内容（例如生存时间）</strong>“ 等耗费的时间。</p><p><strong>处理时延一般无法用一个简单的公式进行计算。</strong></p><h3 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/8AFF626A14CB2D47326DA52106E86BD9.png" alt="img"></p><p>分组**<u>在路由器</u><strong>确定了分组的转发接口后，</strong>在输出队列中排队缓存并等待转发**所耗费的时间。</p><p><strong>排队时延一般无法用一个简单的公式进行计算。</strong></p><h3 id="推广结论"><a href="#推广结论" class="headerlink" title="&#x3D;&#x3D;推广结论&#x3D;&#x3D;"></a>&#x3D;&#x3D;推广结论&#x3D;&#x3D;</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/85BA4992905C2F0F1360C75659DEF5E3.png" alt="img"></p><p>由上图☝️归纳总结，网络两端通过$n$个路由器，转发$m$个分组消耗的<strong>总时延</strong>为多少？</p><p>​$总时延 &#x3D; m * t_发 + n * t_发 + (n + 1) * t_传$</p><p>​&#x3D;&#x3D;$&#x3D; (m + n) * t_发 + (n + 1) * t_传$&#x3D;&#x3D;</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/D4BC64C6B4FD2564D2C20A61C9A44790.png" alt="img"></p><hr><h2 id="1-5-5时延带宽积-b"><a href="#1-5-5时延带宽积-b" class="headerlink" title="1.5.5时延带宽积(b)"></a>1.5.5时延带宽积(b)</h2><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/4343A07F829D8C8F66959E6EE4419230.png" alt="img" style="zoom: 25%;" /><p>&#x3D;&#x3D;**<code>时延带宽积:</code>传播时延(s) * 带宽(b&#x2F;s)**。又称为”<strong>以比特为单位的链路长度</strong>“。&#x3D;&#x3D;</p><hr><h2 id="1-5-6往返时间RTT"><a href="#1-5-6往返时间RTT" class="headerlink" title="1.5.6往返时间RTT"></a>1.5.6往返时间RTT</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/7EF992825B00E03A72765C5F71D543FF.png" alt="img"></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20230122180423074.png" alt="image-20230122180423074"></p><p>&#x3D;&#x3D;<strong><code>往返时间：</code>发送端发送数据分组</strong>开始，到发送端<strong>又接收到确认分组</strong>为止，共耗费的时间。($&#x3D;传播时延 * 2$)&#x3D;&#x3D;</p><hr><h2 id="1-5-7利用率"><a href="#1-5-7利用率" class="headerlink" title="1.5.7利用率"></a>1.5.7利用率</h2><p>​&#x3D;&#x3D;$$ 利用率&#x3D;\begin{cases}<br>信道利用率：\frac{有数据通过时间t}{(有+无) 数据通过时间t} \quad \<br>网络利用率：全网络的信道利用率的加权平均<br>\end{cases}$$&#x3D;&#x3D;</p><blockquote><p><strong>注意</strong>：信道利用率 <strong>并非越高越好！</strong></p><p>解释：根据排队论：<strong>信道利用率$U$越高，该信道引起的时延$D$也会迅速增加</strong></p><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/8746B666B4014D79A01A252F6C1F7A65.png" alt="img"></p></blockquote><hr><h2 id="1-5-8丢包率"><a href="#1-5-8丢包率" class="headerlink" title="1.5.8丢包率"></a>1.5.8丢包率</h2><p>&#x3D;&#x3D;<strong><code>丢包率：</code><strong>在一定的时间范围内，传输过程中</strong>丢失的分组数量</strong>与<strong>总分组数量</strong>的<strong>比例</strong>(反应网络拥塞情况)。&#x3D;&#x3D;具体可分为接口丢包率、节点丢包率、链路丢包率、路径丢包率以及网络丢包率等。</p><h3 id="分组丢失的两种情况"><a href="#分组丢失的两种情况" class="headerlink" title="分组丢失的两种情况"></a>分组丢失的两种情况</h3><ol><li>产生<strong>误码</strong>，被路由器丢弃</li><li>分组到达一台队列已满的分组交换机时，被交换机丢弃；在通信量较大时可能造成<strong>网络拥塞</strong>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gcc—工具链</title>
      <link href="/2024/02/02/gcc%E2%80%94%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
      <url>/2024/02/02/gcc%E2%80%94%E5%B7%A5%E5%85%B7%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="gcc工具链"><a href="#gcc工具链" class="headerlink" title="gcc工具链"></a>gcc工具链</h1><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20240202000746320.png" alt="目录结构"></p><h2 id="一、gcc四步骤"><a href="#一、gcc四步骤" class="headerlink" title="一、gcc四步骤"></a>一、gcc四步骤</h2><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/C9577FD85681FA27D4706612B317E577.png" alt="gcc4部操作"></p><h3 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1.预处理"></a>1.预处理</h3><p>预处理器处理C语言源代码，<strong>扫描程序中所有的#开头的预编译指令，并将它们替换成相应的文本</strong>。预编译指令可以包括头文件包含、条件编译等等。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>E hello<span class="token punctuation">.</span>c <span class="token operator">-</span>o hello<span class="token punctuation">.</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><blockquote><p><strong>消耗时间和系统资源最多</strong></p></blockquote><p>编译器将预处理器处理后的代码<strong>转换成汇编代码</strong>。它会对代码进行语法和语义分析，检查程序的语法错误和类型错误，并生成汇编代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>S hello<span class="token punctuation">.</span>i <span class="token operator">-</span>o hello<span class="token punctuation">.</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-汇编"><a href="#3-汇编" class="headerlink" title="3.汇编"></a>3.汇编</h3><p>汇编器将汇编代码转换成机器码。它会将<strong>汇编代码转换为可执行代码</strong>，同时还会生成调试信息和符号表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>c hello<span class="token punctuation">.</span>s <span class="token operator">-</span>o hello<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><p>链接器将编译器生成的目标代码以及可能的库文件合并成最终的可执行文件。链接器<strong>将所有代码段和数据段链接起来，解析所有的符号引用，将地址回填。生成可执行文件</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc hello<span class="token punctuation">.</span>o <span class="token operator">-</span>o hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="二、gcc编译常用参数"><a href="#二、gcc编译常用参数" class="headerlink" title="二、gcc编译常用参数"></a>二、gcc编译常用参数</h2><h3 id="1-头文件跨目录依赖"><a href="#1-头文件跨目录依赖" class="headerlink" title="1.头文件跨目录依赖"></a>1.头文件跨目录依赖</h3><p><strong>源文件与头文件不在同一个目录下</strong></p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228150656571.png" alt="当前目录结构"  /><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>I<span class="token punctuation">.</span><span class="token operator">/</span>newdir<span class="token operator">/</span> gcctest<span class="token punctuation">.</span>c <span class="token operator">-</span>o gcctest <span class="token comment">//-I后面表示头文件所在路径(绝对/相对)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-只做预处理-编译-汇编"><a href="#2-只做预处理-编译-汇编" class="headerlink" title="2.只做预处理+编译+汇编"></a>2.只做预处理+编译+汇编</h3><p><em><em>得到</em>.o的二进制文件</em>*</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>c gcctest <span class="token operator">-</span>o gcctest<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-编译时添加调试语句"><a href="#3-编译时添加调试语句" class="headerlink" title="3.编译时添加调试语句"></a>3.编译时添加调试语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>g gcctest<span class="token punctuation">.</span>c <span class="token operator">-</span>o gcctest2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>显然，编译出来的可执行文件大小变大了，多了可调试文件在内</strong></p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228152301962.png" alt="添加调试语句-文件变大" style="zoom:67%;" /><hr><h2 id="三、csapp—chapter7-链接"><a href="#三、csapp—chapter7-链接" class="headerlink" title="三、csapp—chapter7:链接"></a>三、csapp—chapter7:链接</h2><p>已知一个main.c文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token number">1</span> #include<span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span> <span class="token number">2</span> <span class="token comment">//count和value两个全局变量</span> <span class="token number">3</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token number">5</span>  <span class="token number">6</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum is:%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span> <span class="token number">9</span> <span class="token number">10</span><span class="token number">11</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">12</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">13</span>         <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">14</span>         <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">15</span> <span class="token number">16</span>         <span class="token function">func</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>gcc -c main.c</code>得到可重定位二进制文件，再根据<code>wc -c main.o</code>查看main.o文件的大小</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># wc <span class="token operator">-</span>c main<span class="token punctuation">.</span>o<span class="token number">1856</span> main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>readelf -h main.o</code>查看ELF可重定位目标文件的ELF头(ELF Header)的具体内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>o<span class="token comment">//-h：只显示ELF Header的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>h main<span class="token punctuation">.</span>oELF 头：  Magic：  <span class="token number">7f</span> <span class="token number">45</span> <span class="token number">4</span>c <span class="token number">46</span> <span class="token number">02</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>   类别<span class="token operator">:</span>                              ELF64  数据<span class="token operator">:</span>                              <span class="token number">2</span> 补码，小端序 <span class="token punctuation">(</span>little endian<span class="token punctuation">)</span>  版本<span class="token operator">:</span>                              <span class="token number">1</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span>  OS<span class="token operator">/</span>ABI<span class="token operator">:</span>                            UNIX <span class="token operator">-</span> System V  ABI 版本<span class="token operator">:</span>                          <span class="token number">0</span>  类型<span class="token operator">:</span>                              <span class="token function">REL</span> <span class="token punctuation">(</span>可重定位文件<span class="token punctuation">)</span>  系统架构<span class="token operator">:</span>                          Advanced Micro Devices X86<span class="token operator">-</span><span class="token number">64</span>  版本<span class="token operator">:</span>                              <span class="token number">0x1</span>  入口点地址：              <span class="token number">0x0</span>  程序头起点：              <span class="token number">0</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  Start of section headers<span class="token operator">:</span>          <span class="token number">1024</span> <span class="token punctuation">(</span>bytes into file<span class="token punctuation">)</span>  标志：             <span class="token number">0x0</span>  本头的大小：       <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  程序头大小：       <span class="token number">0</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  Number of program headers<span class="token operator">:</span>         <span class="token number">0</span>  节头大小：         <span class="token number">64</span> <span class="token punctuation">(</span>字节<span class="token punctuation">)</span>  节头数量：         <span class="token number">13</span>  字符串表索引节头： <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-可重定位目标文件-ELF文件"><a href="#1-可重定位目标文件-ELF文件" class="headerlink" title="1.可重定位目标文件(ELF文件)"></a>1.可重定位目标文件(ELF文件)</h3><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228190228140.png" alt="ELF文件"></p><h3 id="2-section-节-的具体内容"><a href="#2-section-节-的具体内容" class="headerlink" title="2.section(节)的具体内容"></a>2.section(节)的具体内容</h3><ol><li><strong><code>.text</code>：已编译程序的及其代码</strong></li><li><strong><code>.rodata</code>：只读数据，如：prinf函数内的格式串</strong></li><li><strong><code>.data</code>：<u>已初始化</u>的全局和静态C变量</strong></li><li><strong><code>.bss(Better Save Space)</code>：<u>未初始化</u>的全局和静态C变量</strong></li><li><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231228191717559.png" style="zoom: 33%;" /></li></ol><h3 id="3-符号-符号表-symtab）"><a href="#3-符号-符号表-symtab）" class="headerlink" title="3.符号&amp;符号表(.symtab）"></a>3.符号&amp;符号表(.symtab）</h3><p><strong>对于每一个可重定位目标文件(ELF)m，都有一个符号表(.symtab节中)。在链接器的上下文中，有三种不同的符号：</strong></p><ol><li><strong><code>全局符号(Global Symbols)</code>：模块m定义+能被其他模块引用</strong></li><li><strong><code>外部符号(Externals Symbols)</code>：其他模块定义+能被模块m引用</strong></li><li><strong><code>局部符号(Local Symbols)</code>：只被模块m定义+其他模块不能引用。如：任何带有static修饰的全局变量或函数 都是模块私有的，其他模块不能访问，类似Java的private关键字</strong></li></ol><blockquote><p><strong>注：</strong>.symtab节的符号表不包含<strong>本地非静态局部变量</strong>，因为其在<strong>栈中被管理</strong>！</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># readelf <span class="token operator">-</span>s main<span class="token punctuation">.</span>oSymbol table <span class="token char">'.symtab'</span> contains <span class="token number">16</span> entries<span class="token operator">:</span>   Num<span class="token operator">:</span>    Value          Size Type    Bind   Vis      Ndx Name     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  LOCAL  DEFAULT  UND      <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> FILE    LOCAL  DEFAULT  ABS main<span class="token punctuation">.</span>c     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">1</span>      <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">3</span>      <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">4</span>      <span class="token number">5</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">5</span>      <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">3</span> a<span class="token punctuation">.</span><span class="token number">2185</span>     <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  LOCAL  DEFAULT    <span class="token number">4</span> b<span class="token punctuation">.</span><span class="token number">2186</span>     <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">7</span>      <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">8</span>     <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">6</span>     <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT    <span class="token number">3</span> count    <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0000000000000004</span>     <span class="token number">4</span> OBJECT  GLOBAL DEFAULT  COM value    <span class="token number">13</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>    <span class="token number">33</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> func    <span class="token number">14</span><span class="token operator">:</span> <span class="token number">0000000000000000</span>     <span class="token number">0</span> NOTYPE  GLOBAL DEFAULT  UND printf    <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0000000000000021</span>    <span class="token number">55</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Type：FUNC-函数、OBJECT-变量数组等数据对象</p><p>Value：表示函数相对于.text section起始位置的偏移量</p><p>Bind：作用范围。局部&#x2F;全局</p><p>Ndx：表示节头部表的section的数组索引。如：Ndx&#x3D;1表示在.text节；Ndx&#x3D;3表示在.data节</p><blockquote><p>Ndx表示中有<strong>3个伪节：</strong></p></blockquote><blockquote><ul><li><strong><code>ABS</code>：不该被重定位的符号</strong></li><li><strong><code>UNDEF</code>：未定义的符号</strong></li><li><strong><code>COMMON</code>：未被分配位置的初始化的数据目标</strong></li></ul></blockquote><blockquote><p><strong>注意：变量count和value属于不同section的原因：count初始化了，value没有初始化</strong></p></blockquote><blockquote><p><strong>COMMON：未初始化的全局变量；.bss节：未初始化的静态变量+初始化为0的静态&#x2F;全局变量</strong></p></blockquote></blockquote><h3 id="4-符号解析"><a href="#4-符号解析" class="headerlink" title="4.符号解析"></a>4.符号解析</h3><p>对以下源文件进行编译linkerror.c进行编译汇编，生成二进制文件linkerror.o。</p><p>其中，该代码<strong>仅对函数foo进行声明</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gcc -c linkerror.c </code>，编译可以通过！<font size=3 color=red>当编译器遇到一个不是在当前模块定义的符号(变量&#x2F;函数名)时，会假设该符号是在在其他模块在定义的。</font></p><p><font size=3 color=red>但是链接器(ld)无法解析对foo的引用时，就会终止！</font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>Wall <span class="token operator">-</span>Og <span class="token operator">-</span>o linkerror linkerror<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>cc5EcYAf<span class="token punctuation">.</span>o：在函数‘main’中：linkerror<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x5</span><span class="token punctuation">)</span>：对‘foo’未定义的引用collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font size=4 color=red>引出问题：”全局符号”在多个可重定位目标文件中【同名定义】，如何处理？</font></p><p><strong>编译时，编译器向汇编器输出每个全局符号的类型：</strong></p><ul><li><strong><code>Strong symbols(强符号)</code>：函数和已初始化的全局变量</strong></li><li><strong><code>Weak symbols(弱符号)</code>：未初始化的全局变量</strong></li></ul><p><strong>汇编时，汇编器将强弱信息隐含地编码在ELF的符号表(.symtab)里</strong></p><p><strong>链接时，链接器根据以下3种情况处理多重定义的全局符号：</strong></p><ol><li><p><strong>规则1：不允许有多个同名的强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar1.c*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo1<span class="token punctuation">.</span>c bar1<span class="token punctuation">.</span>c<span class="token operator">/</span>tmp<span class="token operator">/</span>ccSHeCo9<span class="token punctuation">.</span>o：在函数‘main’中：bar1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">:</span> main 的多重定义<span class="token operator">/</span>tmp<span class="token operator">/</span>ccnLYE7L<span class="token punctuation">.</span>o<span class="token operator">:</span>foo1<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token number">0x0</span><span class="token punctuation">)</span>：第一次在此定义collect2<span class="token operator">:</span> 错误：ld 返回 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>规则2：一个强符号与多个弱符号同名，那么选择强符号</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo2.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar2.c*/</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo2<span class="token punctuation">.</span>c bar2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outx <span class="token operator">=</span> <span class="token number">15212</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数f将x的值由15213改为15212。一个模块(bar2.c)里的x未初始化(弱符号)，链接器会安静地选择其他模块(foo2.c)里定义的强符号</p></li><li><p><strong>规则3：如果有多个弱符号同名，任意选择一个</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*foo3.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">15212</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">15213</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = 0x%x y = 0x%x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*bar3.c*/</span><span class="token keyword">double</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc foo3<span class="token punctuation">.</span>c bar3<span class="token punctuation">.</span>c<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>ld<span class="token operator">:</span> Warning<span class="token operator">:</span> alignment <span class="token number">4</span> of symbol `x' in <span class="token operator">/</span>tmp<span class="token operator">/</span>ccWPcPGG<span class="token punctuation">.</span>o is smaller than <span class="token number">8</span> in <span class="token operator">/</span>tmp<span class="token operator">/</span>cc3MhEaU<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="静态库-static-library"><a href="#静态库-static-library" class="headerlink" title="静态库(static library)"></a>静态库(static library)</h4><p>在共享库出现之前，<strong>公用功能(atoi&#x2F;printf&#x2F;scanf&#x2F;strcpy&#x2F;rand等)<strong>是以</strong>静态库</strong>的形式存在的，它把<strong>通用功能模块的多个目标文件打包在一起形成<code>*.a</code>的文件(如libc.a)<strong>，用到它的程序只需要在链接时指定这个库文件，</strong>链接器就会从这个库中抽取出用到的功能代码拷贝到目标程序中</strong>，而不需要每次都对这些通用功能代码重新编译。</p><p><strong>对文件<em>addvec.c</em>和<em>multvec.c</em>进行编译<code>gcc -c addvec.c multvec.c</code>，得到目标模块</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> addcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                addcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> multcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">multvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>                multcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用<code>AR工具</code>将两个目标模块<em>addvec.o multvec.o</em>打包成静态库(<code>ar rcs libxxx.a xxx.o xxx.o</code>)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># ar rcs linvector<span class="token punctuation">.</span>a addvec<span class="token punctuation">.</span>o multvec<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以main2.c文件为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"vector.h"</span></span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addvec</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = [%d %d]\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中”vector.h”中包含对addvec函数的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>编译和链接输入文件main2.o和libvector.a</strong></p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/1125E426BCF8DCF854B292C45FC50D8A.jpg" style="zoom:20%;" /><blockquote><p><strong>链接器判断main2.o引用了addvec.o定义的addvec符号，所以复制addvec.o到可执行文件。</strong></p><p><strong>因为程序未引用multvec.0定义的符号，所以链接器就不会复制这个模块到可执行文件。</strong></p><p><strong>此外，链接器还会复制libc.a中的printf.o等C系统运行时的其他模块。</strong></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span>c main2<span class="token punctuation">.</span>c<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># gcc <span class="token operator">-</span><span class="token keyword">static</span> <span class="token operator">-</span>o prog2c main2<span class="token punctuation">.</span>o <span class="token punctuation">.</span><span class="token operator">/</span>libvector<span class="token punctuation">.</span>a<span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>prog2c z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-重定位"><a href="#5-重定位" class="headerlink" title="5.重定位"></a>5.重定位</h3><p>当汇编器生成一个目标模块时，它并不知道数据和代码最终将放在内存中的什么位置。也不知道本模块引用的外部定义函数或全局变量的最终位置。</p><p><strong><font size=3 color=red>因此，汇编器遇到对最终位置未知的目标引用，就会生成一个【重定位条目】，告诉链接器再将目标文件合并为可执行文件时如何修改这个引用。</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*重定位条目-数据结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> offset<span class="token punctuation">;</span><span class="token comment">//被修改的引用的节偏移量</span><span class="token keyword">long</span> type<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token comment">//告知链接器如何修改新的引用</span>    <span class="token comment">//主要两种：1.R_X86_64_PC32(PC相对地址)2.R_X86_64_32(绝对地址)</span>symbol<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//表示被修改的引用是哪个符号</span><span class="token keyword">long</span> addend<span class="token punctuation">;</span><span class="token comment">//有符号数，一些类型的重定位要使用它对被修改引用的值做偏移调整(指令长度)</span><span class="token punctuation">&#125;</span> ELF_Rela<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>代码的重定位条目存放在<code>.rel.text</code>中</strong></p><p><strong>已初始化数据的重定位条目存放在<code>.rel.data</code>中</strong></p></blockquote><h4 id="重定位算法"><a href="#重定位算法" class="headerlink" title="重定位算法"></a>重定位算法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">foreach section s <span class="token punctuation">&#123;</span>foreach relocation entry r <span class="token punctuation">&#123;</span>refptr <span class="token operator">=</span> s <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*1.重定位PC相对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_PC32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>refaddr <span class="token operator">=</span> <span class="token function">ADDR</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">/*refaddr:引用的运行时地址*/</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend <span class="token operator">-</span> refaddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*2.重定位绝对引用*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>type <span class="token operator">==</span> R_X86_64_32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>refptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>addend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="①重定位PC相对引用"><a href="#①重定位PC相对引用" class="headerlink" title="①重定位PC相对引用"></a>①重定位PC相对引用</h4><p><strong>例：对源文件<em>main.c</em>和<em>sum.c</em>进行反汇编：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再用<code>objdump -dx main.o</code>对main,o进行反编译后结果：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@lhyEdu01 link<span class="token punctuation">]</span># objdump <span class="token operator">-</span>dx main<span class="token punctuation">.</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/image-20231229213448474.png" style="zoom: 50%;" /><p><strong>函数main调用sum函数，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xf</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> sumr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_PC32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><u>这些字段告诉链接器修改开始于0xf处的32位PC相对引用，这样在运行时它会指向sum例程</u>。假设链接器已确定：</strong></p><ul><li><strong><code>ADDR(s) = ADDR(.text)</code> &#x3D; 0x400d0</strong></li><li><strong><code>ADDR(r.symbol) = ADDR(sum)</code> &#x3D; 0x400e8</strong></li></ul><p><strong>使用<code>重定位算法</code>知：</strong></p><ol><li><p><strong>链接器首先算出引用的<u>运行时地址</u>：</strong></p><p><strong>ref_addr &#x3D; ADDR(s) + r.offset &#x3D; 0x4004d0 + 0xf &#x3D; 0x4004df</strong> </p></li><li><p><strong>然后更新该引用，使得它再运行时指向sum程序(实际就是求PC的offset)</strong></p><p><strong>ref_ptr &#x3D; ADDR(sum) - ref_addr + r.addend &#x3D; 0x4004e8 - 0x4004df +(-4) &#x3D; 0x5</strong></p></li></ol><p>得到的可执行文件中，call指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>de<span class="token operator">:</span>e8 <span class="token number">05</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       callq  <span class="token number">4004e8</span> <span class="token operator">&lt;</span>sum<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②重定位绝对引用"><a href="#②重定位绝对引用" class="headerlink" title="②重定位绝对引用"></a>②重定位绝对引用</h4><p><strong>mov指令将array地址(32位立即数)复制到寄存器%edi中，sum函数是在sum.o模块中定义的，sum的重定位条目为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">r<span class="token punctuation">,</span>offset <span class="token operator">=</span> <span class="token number">0xa</span>r<span class="token punctuation">.</span>symbol <span class="token operator">=</span> arrayr<span class="token punctuation">.</span>type   <span class="token operator">=</span> R_X86_64_32r<span class="token punctuation">.</span>addend <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些字段告诉链接器修改开始于0xa处的32位绝对引用，这样在运行时它会指向array的第一个字节。假设链接器已确定：</p><ul><li><strong><code>ADDR(r.symbol) = ADDR(array)</code> &#x3D; 0x601018</strong></li></ul><p>链接器修改第13行的引用：</p><p>*<strong>ref_ptr &#x3D; (unsigned) ((ADDR(r.symbol) + r.addend)) &#x3D; (unsigned) (0x601018 + 0) &#x3D; 0x601018</strong></p><p>得到的可执行文件中，机器指令由如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4004</span>d9<span class="token operator">:</span>bf <span class="token number">18</span> <span class="token number">10</span> <span class="token number">60</span> <span class="token number">00</span>       mov $<span class="token number">0x601018</span><span class="token punctuation">,</span> <span class="token operator">%</span>edi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lhy-cs.oss-cn-nanjing.aliyuncs.com/D0D016AAD0F392AC3C3FFCEFEFAA42CC.jpg"></p><h3 id="6-可执行目标文件-加载过程"><a href="#6-可执行目标文件-加载过程" class="headerlink" title="6.可执行目标文件&amp;加载过程"></a>6.可执行目标文件&amp;加载过程</h3>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
